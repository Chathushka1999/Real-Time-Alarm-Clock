
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  0000094e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800320  00800320  00000c02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2e  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c5  00000000  00000000  00002853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  9e:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
void playMelody();
void playNote(float duration, float frequency);
void ring_alarm(int song[]);

void setup(){
	DDRB = 0b00000000;    // set the push button pins as input mode
  a6:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00111100;
  a8:	8c e3       	ldi	r24, 0x3C	; 60
  aa:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b00011111;    // set the led /speaker connecting pins as an output mode
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD =0b00000000;    // set all the pins on off mode
  b0:	1b b8       	out	0x0b, r1	; 11
  b2:	08 95       	ret

000000b4 <_Z11my_delay_msd>:
}

void my_delay_ms(double ms)
{
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	6b 01       	movw	r12, r22
  be:	7c 01       	movw	r14, r24
	while (0 < ms){
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	c7 01       	movw	r24, r14
  c8:	b6 01       	movw	r22, r12
  ca:	0e 94 a6 03 	call	0x74c	; 0x74c <__gesf2>
  ce:	18 16       	cp	r1, r24
  d0:	8c f4       	brge	.+34     	; 0xf4 <_Z11my_delay_msd+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z11my_delay_msd+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z11my_delay_msd+0x28>
  dc:	00 00       	nop
		_delay_ms(1);
		--ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e8       	ldi	r20, 0x80	; 128
  e4:	5f e3       	ldi	r21, 0x3F	; 63
  e6:	c7 01       	movw	r24, r14
  e8:	b6 01       	movw	r22, r12
  ea:	0e 94 03 02 	call	0x406	; 0x406 <__subsf3>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
	PORTD =0b00000000;    // set all the pins on off mode
}

void my_delay_ms(double ms)
{
	while (0 < ms){
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <_Z11my_delay_msd+0xc>
		_delay_ms(1);
		--ms;
	}
}
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	08 95       	ret

000000fe <_Z8playNotedf>:
}

 
 
void playNote(double duration, float frequency)
{
  fe:	4f 92       	push	r4
 100:	5f 92       	push	r5
 102:	6f 92       	push	r6
 104:	7f 92       	push	r7
 106:	8f 92       	push	r8
 108:	9f 92       	push	r9
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	4b 01       	movw	r8, r22
 118:	5c 01       	movw	r10, r24
    long int i,cycles;
    double half_period;                // assigning the necessary variables
    float wavelength;
 
    wavelength=(1/frequency)*1000;    // find the wave length of the pulse from frequency
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	9f e3       	ldi	r25, 0x3F	; 63
 122:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__divsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4a e7       	ldi	r20, 0x7A	; 122
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
    cycles=duration/wavelength;       // The number of cycles.
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	c5 01       	movw	r24, r10
 13c:	b4 01       	movw	r22, r8
 13e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__divsf3>
 142:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixsfsi>
 146:	2b 01       	movw	r4, r22
 148:	3c 01       	movw	r6, r24
    half_period = wavelength/2;       // The time between each toggle.
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8a b9       	out	0x0a, r24	; 10
 
    for (i=0;i<cycles;i++){
 164:	c1 2c       	mov	r12, r1
 166:	d1 2c       	mov	r13, r1
 168:	76 01       	movw	r14, r12
 16a:	c4 14       	cp	r12, r4
 16c:	d5 04       	cpc	r13, r5
 16e:	e6 04       	cpc	r14, r6
 170:	f7 04       	cpc	r15, r7
 172:	a4 f4       	brge	.+40     	; 0x19c <_Z8playNotedf+0x9e>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT |= (1 << SPEAKER_PIN);                    // Output 5 V to port Pin 7.
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	8b b9       	out	0x0b, r24	; 11
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 182:	c5 01       	movw	r24, r10
 184:	b4 01       	movw	r22, r8
 186:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	8b b9       	out	0x0b, r24	; 11
    cycles=duration/wavelength;       // The number of cycles.
    half_period = wavelength/2;       // The time between each toggle.
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 
    for (i=0;i<cycles;i++){
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	c8 1a       	sub	r12, r24
 194:	d8 0a       	sbc	r13, r24
 196:	e8 0a       	sbc	r14, r24
 198:	f8 0a       	sbc	r15, r24
 19a:	e7 cf       	rjmp	.-50     	; 0x16a <_Z8playNotedf+0x6c>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
    }
 
    return; 
}
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	08 95       	ret

000001b6 <_Z10ring_alarmPi>:

void ring_alarm(int song[]){
 1b6:	2f 92       	push	r2
 1b8:	3f 92       	push	r3
 1ba:	4f 92       	push	r4
 1bc:	5f 92       	push	r5
 1be:	6f 92       	push	r6
 1c0:	7f 92       	push	r7
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7c 01       	movw	r14, r24
	int notes=song[0];
 1dc:	fc 01       	movw	r30, r24
 1de:	c0 80       	ld	r12, Z
 1e0:	d1 80       	ldd	r13, Z+1	; 0x01
	int tempo=song[1];
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	33 81       	ldd	r19, Z+3	; 0x03
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
 1e6:	03 2e       	mov	r0, r19
 1e8:	00 0c       	add	r0, r0
 1ea:	44 0b       	sbc	r20, r20
 1ec:	55 0b       	sbc	r21, r21
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	79 ea       	ldi	r23, 0xA9	; 169
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodsi4>
 1fa:	19 01       	movw	r2, r18
	int divider = 0;
	double noteDuration = 0;
	/* iterate over the notes of the melody.*/
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 1fc:	02 e0       	ldi	r16, 0x02	; 2
 1fe:	10 e0       	ldi	r17, 0x00	; 0
void ring_alarm(int song[]){
	int notes=song[0];
	int tempo=song[1];
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
	int divider = 0;
	double noteDuration = 0;
 200:	81 2c       	mov	r8, r1
 202:	91 2c       	mov	r9, r1
 204:	54 01       	movw	r10, r8
	/* iterate over the notes of the melody.*/
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 206:	c6 01       	movw	r24, r12
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	08 17       	cp	r16, r24
 20e:	19 07       	cpc	r17, r25
 210:	0c f0       	brlt	.+2      	; 0x214 <_Z10ring_alarmPi+0x5e>
 212:	9d c0       	rjmp	.+314    	; 0x34e <_Z10ring_alarmPi+0x198>
		divider = song[thisNote + 1];                                    // calculates the duration of each note
 214:	e8 01       	movw	r28, r16
 216:	f8 01       	movw	r30, r16
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0d       	add	r30, r14
 220:	ff 1d       	adc	r31, r15
 222:	60 81       	ld	r22, Z
 224:	71 81       	ldd	r23, Z+1	; 0x01
		if (divider > 0) {
 226:	16 16       	cp	r1, r22
 228:	17 06       	cpc	r1, r23
 22a:	64 f4       	brge	.+24     	; 0x244 <_Z10ring_alarmPi+0x8e>
		noteDuration = (wholenote) / divider;}                           // regular note, just proceed
 22c:	c1 01       	movw	r24, r2
 22e:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodhi4>
 232:	07 2e       	mov	r0, r23
 234:	00 0c       	add	r0, r0
 236:	88 0b       	sbc	r24, r24
 238:	99 0b       	sbc	r25, r25
 23a:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 23e:	4b 01       	movw	r8, r22
 240:	5c 01       	movw	r10, r24
 242:	1b c0       	rjmp	.+54     	; 0x27a <_Z10ring_alarmPi+0xc4>
		else if (divider < 0) {
 244:	77 23       	and	r23, r23
 246:	cc f4       	brge	.+50     	; 0x27a <_Z10ring_alarmPi+0xc4>
			noteDuration = (wholenote) / abs(divider);                   // dotted notes are represented with negative durations!!
 248:	9b 01       	movw	r18, r22
 24a:	77 23       	and	r23, r23
 24c:	24 f4       	brge	.+8      	; 0x256 <_Z10ring_alarmPi+0xa0>
 24e:	22 27       	eor	r18, r18
 250:	33 27       	eor	r19, r19
 252:	26 1b       	sub	r18, r22
 254:	37 0b       	sbc	r19, r23
 256:	c1 01       	movw	r24, r2
 258:	b9 01       	movw	r22, r18
 25a:	0e 94 3c 04 	call	0x878	; 0x878 <__divmodhi4>
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
		noteDuration *= 1.5;}                                            // increases the duration in half for dotted notes
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 ec       	ldi	r20, 0xC0	; 192
 270:	5f e3       	ldi	r21, 0x3F	; 63
 272:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3>
 276:	4b 01       	movw	r8, r22
 278:	5c 01       	movw	r10, r24
		if (!(PINB & (1<<3))){
 27a:	1b 99       	sbic	0x03, 3	; 3
 27c:	09 c0       	rjmp	.+18     	; 0x290 <_Z10ring_alarmPi+0xda>
			alarm_status=0;snooze=0;
 27e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 282:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 286:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 28a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
		break;}
 28e:	5f c0       	rjmp	.+190    	; 0x34e <_Z10ring_alarmPi+0x198>
		else if((!(PINB & (1<<2))) && snooze<3 ){
 290:	1a 99       	sbic	0x03, 2	; 3
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <_Z10ring_alarmPi+0xee>
 294:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 298:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 29c:	03 97       	sbiw	r24, 0x03	; 3
 29e:	24 f0       	brlt	.+8      	; 0x2a8 <_Z10ring_alarmPi+0xf2>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	88 23       	and	r24, r24
 2ac:	99 f0       	breq	.+38     	; 0x2d4 <_Z10ring_alarmPi+0x11e>
			snooze=snooze+1;
 2ae:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 2b2:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <snooze+0x1>
 2bc:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <snooze>
			my_delay_ms(5000);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e4       	ldi	r23, 0x40	; 64
 2c4:	8c e9       	ldi	r24, 0x9C	; 156
 2c6:	95 e4       	ldi	r25, 0x45	; 69
 2c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
			ring_alarm(song);}
 2cc:	c7 01       	movw	r24, r14
 2ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <_Z10ring_alarmPi+0x148>
		else if((!(PINB & (1<<2))) && snooze==3 ){
 2d4:	1a 99       	sbic	0x03, 2	; 3
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <_Z10ring_alarmPi+0x132>
 2d8:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <snooze>
 2dc:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <snooze+0x1>
 2e0:	23 30       	cpi	r18, 0x03	; 3
 2e2:	31 05       	cpc	r19, r1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <_Z10ring_alarmPi+0x132>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	88 23       	and	r24, r24
 2ea:	49 f0       	breq	.+18     	; 0x2fe <_Z10ring_alarmPi+0x148>
			snooze=0;alarm_status=0;
 2ec:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 2f0:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
 2f4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 2f8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
			break;}
 2fc:	28 c0       	rjmp	.+80     	; 0x34e <_Z10ring_alarmPi+0x198>
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
 2fe:	cc 0f       	add	r28, r28
 300:	dd 1f       	adc	r29, r29
 302:	ce 0d       	add	r28, r14
 304:	df 1d       	adc	r29, r15
 306:	68 81       	ld	r22, Y
 308:	79 81       	ldd	r23, Y+1	; 0x01
 30a:	07 2e       	mov	r0, r23
 30c:	00 0c       	add	r0, r0
 30e:	88 0b       	sbc	r24, r24
 310:	99 0b       	sbc	r25, r25
 312:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 316:	2b 01       	movw	r4, r22
 318:	3c 01       	movw	r6, r24
 31a:	26 e6       	ldi	r18, 0x66	; 102
 31c:	36 e6       	ldi	r19, 0x66	; 102
 31e:	46 e6       	ldi	r20, 0x66	; 102
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3>
 32a:	a3 01       	movw	r20, r6
 32c:	92 01       	movw	r18, r4
 32e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
 332:	c5 01       	movw	r24, r10
 334:	b4 01       	movw	r22, r8
 336:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
		playNote(noteDuration, 0);                                       // stop the waveform generation before the next note.
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	a9 01       	movw	r20, r18
 340:	c5 01       	movw	r24, r10
 342:	b4 01       	movw	r22, r8
 344:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
	int tempo=song[1];
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
	int divider = 0;
	double noteDuration = 0;
	/* iterate over the notes of the melody.*/
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 348:	0e 5f       	subi	r16, 0xFE	; 254
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	5c cf       	rjmp	.-328    	; 0x206 <_Z10ring_alarmPi+0x50>
			break;}
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
		playNote(noteDuration, 0);                                       // stop the waveform generation before the next note.
	}
	if (snooze>=0 && snooze<3 && alarm_status==1){
 34e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 352:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	91 05       	cpc	r25, r1
 35a:	b0 f4       	brcc	.+44     	; 0x388 <_Z10ring_alarmPi+0x1d2>
 35c:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <__data_end>
 360:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <__data_end+0x1>
 364:	21 30       	cpi	r18, 0x01	; 1
 366:	31 05       	cpc	r19, r1
 368:	79 f4       	brne	.+30     	; 0x388 <_Z10ring_alarmPi+0x1d2>
		snooze=snooze+1;
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <snooze+0x1>
 370:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <snooze>
		my_delay_ms(5000);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e4       	ldi	r23, 0x40	; 64
 378:	8c e9       	ldi	r24, 0x9C	; 156
 37a:	95 e4       	ldi	r25, 0x45	; 69
 37c:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
		ring_alarm(song);}
 380:	c7 01       	movw	r24, r14
 382:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 386:	10 c0       	rjmp	.+32     	; 0x3a8 <_Z10ring_alarmPi+0x1f2>
	else if(snooze==3 && alarm_status==1){
 388:	03 97       	sbiw	r24, 0x03	; 3
 38a:	71 f4       	brne	.+28     	; 0x3a8 <_Z10ring_alarmPi+0x1f2>
 38c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
 390:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	41 f4       	brne	.+16     	; 0x3a8 <_Z10ring_alarmPi+0x1f2>
		alarm_status=0;snooze=0;
 398:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 39c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 3a0:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 3a4:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
		return;}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	bf 90       	pop	r11
 3ba:	af 90       	pop	r10
 3bc:	9f 90       	pop	r9
 3be:	8f 90       	pop	r8
 3c0:	7f 90       	pop	r7
 3c2:	6f 90       	pop	r6
 3c4:	5f 90       	pop	r5
 3c6:	4f 90       	pop	r4
 3c8:	3f 90       	pop	r3
 3ca:	2f 90       	pop	r2
 3cc:	08 95       	ret

000003ce <main>:
	}
}

int main(void)
{
	setup();
 3ce:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
    while(1) {
		if(!(PINB & (1<<5))){
 3d2:	1d 99       	sbic	0x03, 5	; 3
 3d4:	0b c0       	rjmp	.+22     	; 0x3ec <main+0x1e>
			alarm_status=1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3de:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
		    ring_alarm(melody1);}
 3e2:	84 e5       	ldi	r24, 0x54	; 84
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 3ea:	f3 cf       	rjmp	.-26     	; 0x3d2 <main+0x4>
		else if(!(PINB & (1<<4))){
 3ec:	1c 99       	sbic	0x03, 4	; 3
 3ee:	f1 cf       	rjmp	.-30     	; 0x3d2 <main+0x4>
			alarm_status=1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3f8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
			ring_alarm(melody2);}
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 404:	e6 cf       	rjmp	.-52     	; 0x3d2 <main+0x4>

00000406 <__subsf3>:
 406:	50 58       	subi	r21, 0x80	; 128

00000408 <__addsf3>:
 408:	bb 27       	eor	r27, r27
 40a:	aa 27       	eor	r26, r26
 40c:	0e 94 1b 02 	call	0x436	; 0x436 <__addsf3x>
 410:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 414:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 418:	38 f0       	brcs	.+14     	; 0x428 <__addsf3+0x20>
 41a:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 41e:	20 f0       	brcs	.+8      	; 0x428 <__addsf3+0x20>
 420:	39 f4       	brne	.+14     	; 0x430 <__addsf3+0x28>
 422:	9f 3f       	cpi	r25, 0xFF	; 255
 424:	19 f4       	brne	.+6      	; 0x42c <__addsf3+0x24>
 426:	26 f4       	brtc	.+8      	; 0x430 <__addsf3+0x28>
 428:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 42c:	0e f4       	brtc	.+2      	; 0x430 <__addsf3+0x28>
 42e:	e0 95       	com	r30
 430:	e7 fb       	bst	r30, 7
 432:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>

00000436 <__addsf3x>:
 436:	e9 2f       	mov	r30, r25
 438:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 43c:	58 f3       	brcs	.-42     	; 0x414 <__addsf3+0xc>
 43e:	ba 17       	cp	r27, r26
 440:	62 07       	cpc	r22, r18
 442:	73 07       	cpc	r23, r19
 444:	84 07       	cpc	r24, r20
 446:	95 07       	cpc	r25, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__addsf3x+0x1c>
 44a:	79 f4       	brne	.+30     	; 0x46a <__addsf3x+0x34>
 44c:	a6 f5       	brtc	.+104    	; 0x4b6 <__addsf3x+0x80>
 44e:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 452:	0e f4       	brtc	.+2      	; 0x456 <__addsf3x+0x20>
 454:	e0 95       	com	r30
 456:	0b 2e       	mov	r0, r27
 458:	ba 2f       	mov	r27, r26
 45a:	a0 2d       	mov	r26, r0
 45c:	0b 01       	movw	r0, r22
 45e:	b9 01       	movw	r22, r18
 460:	90 01       	movw	r18, r0
 462:	0c 01       	movw	r0, r24
 464:	ca 01       	movw	r24, r20
 466:	a0 01       	movw	r20, r0
 468:	11 24       	eor	r1, r1
 46a:	ff 27       	eor	r31, r31
 46c:	59 1b       	sub	r21, r25
 46e:	99 f0       	breq	.+38     	; 0x496 <__addsf3x+0x60>
 470:	59 3f       	cpi	r21, 0xF9	; 249
 472:	50 f4       	brcc	.+20     	; 0x488 <__addsf3x+0x52>
 474:	50 3e       	cpi	r21, 0xE0	; 224
 476:	68 f1       	brcs	.+90     	; 0x4d2 <__addsf3x+0x9c>
 478:	1a 16       	cp	r1, r26
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	a2 2f       	mov	r26, r18
 47e:	23 2f       	mov	r18, r19
 480:	34 2f       	mov	r19, r20
 482:	44 27       	eor	r20, r20
 484:	58 5f       	subi	r21, 0xF8	; 248
 486:	f3 cf       	rjmp	.-26     	; 0x46e <__addsf3x+0x38>
 488:	46 95       	lsr	r20
 48a:	37 95       	ror	r19
 48c:	27 95       	ror	r18
 48e:	a7 95       	ror	r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	53 95       	inc	r21
 494:	c9 f7       	brne	.-14     	; 0x488 <__addsf3x+0x52>
 496:	7e f4       	brtc	.+30     	; 0x4b6 <__addsf3x+0x80>
 498:	1f 16       	cp	r1, r31
 49a:	ba 0b       	sbc	r27, r26
 49c:	62 0b       	sbc	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	ba f0       	brmi	.+46     	; 0x4d2 <__addsf3x+0x9c>
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	a1 f0       	breq	.+40     	; 0x4d0 <__addsf3x+0x9a>
 4a8:	ff 0f       	add	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	c2 f7       	brpl	.-16     	; 0x4a4 <__addsf3x+0x6e>
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__addsf3x+0x9c>
 4b6:	ba 0f       	add	r27, r26
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 1f       	adc	r23, r19
 4bc:	84 1f       	adc	r24, r20
 4be:	48 f4       	brcc	.+18     	; 0x4d2 <__addsf3x+0x9c>
 4c0:	87 95       	ror	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0x9a>
 4ce:	b0 cf       	rjmp	.-160    	; 0x430 <__addsf3+0x28>
 4d0:	93 95       	inc	r25
 4d2:	88 0f       	add	r24, r24
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__addsf3x+0xa2>
 4d6:	99 27       	eor	r25, r25
 4d8:	ee 0f       	add	r30, r30
 4da:	97 95       	ror	r25
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret

000004e0 <__divsf3>:
 4e0:	0e 94 84 02 	call	0x508	; 0x508 <__divsf3x>
 4e4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 4e8:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 4ec:	58 f0       	brcs	.+22     	; 0x504 <__divsf3+0x24>
 4ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 4f2:	40 f0       	brcs	.+16     	; 0x504 <__divsf3+0x24>
 4f4:	29 f4       	brne	.+10     	; 0x500 <__divsf3+0x20>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	29 f0       	breq	.+10     	; 0x504 <__divsf3+0x24>
 4fa:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 4fe:	51 11       	cpse	r21, r1
 500:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 504:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>

00000508 <__divsf3x>:
 508:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 50c:	68 f3       	brcs	.-38     	; 0x4e8 <__divsf3+0x8>

0000050e <__divsf3_pse>:
 50e:	99 23       	and	r25, r25
 510:	b1 f3       	breq	.-20     	; 0x4fe <__divsf3+0x1e>
 512:	55 23       	and	r21, r21
 514:	91 f3       	breq	.-28     	; 0x4fa <__divsf3+0x1a>
 516:	95 1b       	sub	r25, r21
 518:	55 0b       	sbc	r21, r21
 51a:	bb 27       	eor	r27, r27
 51c:	aa 27       	eor	r26, r26
 51e:	62 17       	cp	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	38 f0       	brcs	.+14     	; 0x534 <__divsf3_pse+0x26>
 526:	9f 5f       	subi	r25, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	44 1f       	adc	r20, r20
 530:	aa 1f       	adc	r26, r26
 532:	a9 f3       	breq	.-22     	; 0x51e <__divsf3_pse+0x10>
 534:	35 d0       	rcall	.+106    	; 0x5a0 <__divsf3_pse+0x92>
 536:	0e 2e       	mov	r0, r30
 538:	3a f0       	brmi	.+14     	; 0x548 <__divsf3_pse+0x3a>
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	32 d0       	rcall	.+100    	; 0x5a2 <__divsf3_pse+0x94>
 53e:	91 50       	subi	r25, 0x01	; 1
 540:	50 40       	sbci	r21, 0x00	; 0
 542:	e6 95       	lsr	r30
 544:	00 1c       	adc	r0, r0
 546:	ca f7       	brpl	.-14     	; 0x53a <__divsf3_pse+0x2c>
 548:	2b d0       	rcall	.+86     	; 0x5a0 <__divsf3_pse+0x92>
 54a:	fe 2f       	mov	r31, r30
 54c:	29 d0       	rcall	.+82     	; 0x5a0 <__divsf3_pse+0x92>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	bb 1f       	adc	r27, r27
 556:	26 17       	cp	r18, r22
 558:	37 07       	cpc	r19, r23
 55a:	48 07       	cpc	r20, r24
 55c:	ab 07       	cpc	r26, r27
 55e:	b0 e8       	ldi	r27, 0x80	; 128
 560:	09 f0       	breq	.+2      	; 0x564 <__divsf3_pse+0x56>
 562:	bb 0b       	sbc	r27, r27
 564:	80 2d       	mov	r24, r0
 566:	bf 01       	movw	r22, r30
 568:	ff 27       	eor	r31, r31
 56a:	93 58       	subi	r25, 0x83	; 131
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	3a f0       	brmi	.+14     	; 0x57e <__divsf3_pse+0x70>
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	51 05       	cpc	r21, r1
 574:	78 f0       	brcs	.+30     	; 0x594 <__divsf3_pse+0x86>
 576:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 57a:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 57e:	5f 3f       	cpi	r21, 0xFF	; 255
 580:	e4 f3       	brlt	.-8      	; 0x57a <__divsf3_pse+0x6c>
 582:	98 3e       	cpi	r25, 0xE8	; 232
 584:	d4 f3       	brlt	.-12     	; 0x57a <__divsf3_pse+0x6c>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f7 95       	ror	r31
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	c9 f7       	brne	.-14     	; 0x586 <__divsf3_pse+0x78>
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	bb 1f       	adc	r27, r27
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	ba 07       	cpc	r27, r26
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__divsf3_pse+0xae>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	ba 0b       	sbc	r27, r26
 5bc:	ee 1f       	adc	r30, r30
 5be:	88 f7       	brcc	.-30     	; 0x5a2 <__divsf3_pse+0x94>
 5c0:	e0 95       	com	r30
 5c2:	08 95       	ret

000005c4 <__fixsfsi>:
 5c4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 5c8:	68 94       	set
 5ca:	b1 11       	cpse	r27, r1
 5cc:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 5d0:	08 95       	ret

000005d2 <__fixunssfsi>:
 5d2:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_splitA>
 5d6:	88 f0       	brcs	.+34     	; 0x5fa <__fixunssfsi+0x28>
 5d8:	9f 57       	subi	r25, 0x7F	; 127
 5da:	98 f0       	brcs	.+38     	; 0x602 <__fixunssfsi+0x30>
 5dc:	b9 2f       	mov	r27, r25
 5de:	99 27       	eor	r25, r25
 5e0:	b7 51       	subi	r27, 0x17	; 23
 5e2:	b0 f0       	brcs	.+44     	; 0x610 <__fixunssfsi+0x3e>
 5e4:	e1 f0       	breq	.+56     	; 0x61e <__fixunssfsi+0x4c>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	1a f0       	brmi	.+6      	; 0x5f6 <__fixunssfsi+0x24>
 5f0:	ba 95       	dec	r27
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__fixunssfsi+0x14>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fixunssfsi+0x4c>
 5f6:	b1 30       	cpi	r27, 0x01	; 1
 5f8:	91 f0       	breq	.+36     	; 0x61e <__fixunssfsi+0x4c>
 5fa:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_zero>
 5fe:	b1 e0       	ldi	r27, 0x01	; 1
 600:	08 95       	ret
 602:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 606:	67 2f       	mov	r22, r23
 608:	78 2f       	mov	r23, r24
 60a:	88 27       	eor	r24, r24
 60c:	b8 5f       	subi	r27, 0xF8	; 248
 60e:	39 f0       	breq	.+14     	; 0x61e <__fixunssfsi+0x4c>
 610:	b9 3f       	cpi	r27, 0xF9	; 249
 612:	cc f3       	brlt	.-14     	; 0x606 <__fixunssfsi+0x34>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b3 95       	inc	r27
 61c:	d9 f7       	brne	.-10     	; 0x614 <__fixunssfsi+0x42>
 61e:	3e f4       	brtc	.+14     	; 0x62e <__fixunssfsi+0x5c>
 620:	90 95       	com	r25
 622:	80 95       	com	r24
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__floatunsisf>:
 630:	e8 94       	clt
 632:	09 c0       	rjmp	.+18     	; 0x646 <__floatsisf+0x12>

00000634 <__floatsisf>:
 634:	97 fb       	bst	r25, 7
 636:	3e f4       	brtc	.+14     	; 0x646 <__floatsisf+0x12>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	99 23       	and	r25, r25
 648:	a9 f0       	breq	.+42     	; 0x674 <__floatsisf+0x40>
 64a:	f9 2f       	mov	r31, r25
 64c:	96 e9       	ldi	r25, 0x96	; 150
 64e:	bb 27       	eor	r27, r27
 650:	93 95       	inc	r25
 652:	f6 95       	lsr	r31
 654:	87 95       	ror	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f1 11       	cpse	r31, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__floatsisf+0x1c>
 660:	fa f4       	brpl	.+62     	; 0x6a0 <__floatsisf+0x6c>
 662:	bb 0f       	add	r27, r27
 664:	11 f4       	brne	.+4      	; 0x66a <__floatsisf+0x36>
 666:	60 ff       	sbrs	r22, 0
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <__floatsisf+0x6c>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <__floatsisf+0x6c>
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <__floatsisf+0x48>
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__floatsisf+0x6a>
 67c:	77 23       	and	r23, r23
 67e:	21 f0       	breq	.+8      	; 0x688 <__floatsisf+0x54>
 680:	9e e8       	ldi	r25, 0x8E	; 142
 682:	87 2f       	mov	r24, r23
 684:	76 2f       	mov	r23, r22
 686:	05 c0       	rjmp	.+10     	; 0x692 <__floatsisf+0x5e>
 688:	66 23       	and	r22, r22
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__floatsisf+0x74>
 68c:	96 e8       	ldi	r25, 0x86	; 134
 68e:	86 2f       	mov	r24, r22
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__floatsisf+0x6c>
 696:	9a 95       	dec	r25
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	da f7       	brpl	.-10     	; 0x696 <__floatsisf+0x62>
 6a0:	88 0f       	add	r24, r24
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__fp_inf>:
 6aa:	97 f9       	bld	r25, 7
 6ac:	9f 67       	ori	r25, 0x7F	; 127
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <__fp_nan>:
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
 6b8:	80 ec       	ldi	r24, 0xC0	; 192
 6ba:	08 95       	ret

000006bc <__fp_pscA>:
 6bc:	00 24       	eor	r0, r0
 6be:	0a 94       	dec	r0
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	09 06       	cpc	r0, r25
 6c8:	08 95       	ret

000006ca <__fp_pscB>:
 6ca:	00 24       	eor	r0, r0
 6cc:	0a 94       	dec	r0
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	14 06       	cpc	r1, r20
 6d4:	05 06       	cpc	r0, r21
 6d6:	08 95       	ret

000006d8 <__fp_round>:
 6d8:	09 2e       	mov	r0, r25
 6da:	03 94       	inc	r0
 6dc:	00 0c       	add	r0, r0
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0xc>
 6e0:	88 23       	and	r24, r24
 6e2:	52 f0       	brmi	.+20     	; 0x6f8 <__fp_round+0x20>
 6e4:	bb 0f       	add	r27, r27
 6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__fp_round+0x20>
 6e8:	bf 2b       	or	r27, r31
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0x18>
 6ec:	60 ff       	sbrs	r22, 0
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__fp_round+0x20>
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__fp_split3>:
 6fa:	57 fd       	sbrc	r21, 7
 6fc:	90 58       	subi	r25, 0x80	; 128
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	59 f0       	breq	.+22     	; 0x71a <__fp_splitA+0x10>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	71 f0       	breq	.+28     	; 0x724 <__fp_splitA+0x1a>
 708:	47 95       	ror	r20

0000070a <__fp_splitA>:
 70a:	88 0f       	add	r24, r24
 70c:	97 fb       	bst	r25, 7
 70e:	99 1f       	adc	r25, r25
 710:	61 f0       	breq	.+24     	; 0x72a <__fp_splitA+0x20>
 712:	9f 3f       	cpi	r25, 0xFF	; 255
 714:	79 f0       	breq	.+30     	; 0x734 <__fp_splitA+0x2a>
 716:	87 95       	ror	r24
 718:	08 95       	ret
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	55 1f       	adc	r21, r21
 722:	f2 cf       	rjmp	.-28     	; 0x708 <__fp_split3+0xe>
 724:	46 95       	lsr	r20
 726:	f1 df       	rcall	.-30     	; 0x70a <__fp_splitA>
 728:	08 c0       	rjmp	.+16     	; 0x73a <__fp_splitA+0x30>
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	99 1f       	adc	r25, r25
 732:	f1 cf       	rjmp	.-30     	; 0x716 <__fp_splitA+0xc>
 734:	86 95       	lsr	r24
 736:	71 05       	cpc	r23, r1
 738:	61 05       	cpc	r22, r1
 73a:	08 94       	sec
 73c:	08 95       	ret

0000073e <__fp_zero>:
 73e:	e8 94       	clt

00000740 <__fp_szero>:
 740:	bb 27       	eor	r27, r27
 742:	66 27       	eor	r22, r22
 744:	77 27       	eor	r23, r23
 746:	cb 01       	movw	r24, r22
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__gesf2>:
 74c:	0e 94 18 04 	call	0x830	; 0x830 <__fp_cmp>
 750:	08 f4       	brcc	.+2      	; 0x754 <__gesf2+0x8>
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	08 95       	ret

00000756 <__mulsf3>:
 756:	0e 94 be 03 	call	0x77c	; 0x77c <__mulsf3x>
 75a:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 75e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 762:	38 f0       	brcs	.+14     	; 0x772 <__mulsf3+0x1c>
 764:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 768:	20 f0       	brcs	.+8      	; 0x772 <__mulsf3+0x1c>
 76a:	95 23       	and	r25, r21
 76c:	11 f0       	breq	.+4      	; 0x772 <__mulsf3+0x1c>
 76e:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 772:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 776:	11 24       	eor	r1, r1
 778:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>

0000077c <__mulsf3x>:
 77c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 780:	70 f3       	brcs	.-36     	; 0x75e <__mulsf3+0x8>

00000782 <__mulsf3_pse>:
 782:	95 9f       	mul	r25, r21
 784:	c1 f3       	breq	.-16     	; 0x776 <__mulsf3+0x20>
 786:	95 0f       	add	r25, r21
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	55 1f       	adc	r21, r21
 78c:	62 9f       	mul	r22, r18
 78e:	f0 01       	movw	r30, r0
 790:	72 9f       	mul	r23, r18
 792:	bb 27       	eor	r27, r27
 794:	f0 0d       	add	r31, r0
 796:	b1 1d       	adc	r27, r1
 798:	63 9f       	mul	r22, r19
 79a:	aa 27       	eor	r26, r26
 79c:	f0 0d       	add	r31, r0
 79e:	b1 1d       	adc	r27, r1
 7a0:	aa 1f       	adc	r26, r26
 7a2:	64 9f       	mul	r22, r20
 7a4:	66 27       	eor	r22, r22
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	66 1f       	adc	r22, r22
 7ac:	82 9f       	mul	r24, r18
 7ae:	22 27       	eor	r18, r18
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	62 1f       	adc	r22, r18
 7b6:	73 9f       	mul	r23, r19
 7b8:	b0 0d       	add	r27, r0
 7ba:	a1 1d       	adc	r26, r1
 7bc:	62 1f       	adc	r22, r18
 7be:	83 9f       	mul	r24, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	22 1f       	adc	r18, r18
 7c6:	74 9f       	mul	r23, r20
 7c8:	33 27       	eor	r19, r19
 7ca:	a0 0d       	add	r26, r0
 7cc:	61 1d       	adc	r22, r1
 7ce:	23 1f       	adc	r18, r19
 7d0:	84 9f       	mul	r24, r20
 7d2:	60 0d       	add	r22, r0
 7d4:	21 1d       	adc	r18, r1
 7d6:	82 2f       	mov	r24, r18
 7d8:	76 2f       	mov	r23, r22
 7da:	6a 2f       	mov	r22, r26
 7dc:	11 24       	eor	r1, r1
 7de:	9f 57       	subi	r25, 0x7F	; 127
 7e0:	50 40       	sbci	r21, 0x00	; 0
 7e2:	9a f0       	brmi	.+38     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e4:	f1 f0       	breq	.+60     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7e6:	88 23       	and	r24, r24
 7e8:	4a f0       	brmi	.+18     	; 0x7fc <__mulsf3_pse+0x7a>
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	bb 1f       	adc	r27, r27
 7f0:	66 1f       	adc	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	a9 f7       	brne	.-22     	; 0x7e6 <__mulsf3_pse+0x64>
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	51 05       	cpc	r21, r1
 800:	80 f0       	brcs	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 802:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 806:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	e4 f3       	brlt	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	98 3e       	cpi	r25, 0xE8	; 232
 810:	d4 f3       	brlt	.-12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 812:	86 95       	lsr	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f7 95       	ror	r31
 81c:	e7 95       	ror	r30
 81e:	9f 5f       	subi	r25, 0xFF	; 255
 820:	c1 f7       	brne	.-16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 822:	fe 2b       	or	r31, r30
 824:	88 0f       	add	r24, r24
 826:	91 1d       	adc	r25, r1
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <__fp_cmp>:
 830:	99 0f       	add	r25, r25
 832:	00 08       	sbc	r0, r0
 834:	55 0f       	add	r21, r21
 836:	aa 0b       	sbc	r26, r26
 838:	e0 e8       	ldi	r30, 0x80	; 128
 83a:	fe ef       	ldi	r31, 0xFE	; 254
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	e8 07       	cpc	r30, r24
 842:	f9 07       	cpc	r31, r25
 844:	c0 f0       	brcs	.+48     	; 0x876 <__fp_cmp+0x46>
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	e4 07       	cpc	r30, r20
 84c:	f5 07       	cpc	r31, r21
 84e:	98 f0       	brcs	.+38     	; 0x876 <__fp_cmp+0x46>
 850:	62 1b       	sub	r22, r18
 852:	73 0b       	sbc	r23, r19
 854:	84 0b       	sbc	r24, r20
 856:	95 0b       	sbc	r25, r21
 858:	39 f4       	brne	.+14     	; 0x868 <__fp_cmp+0x38>
 85a:	0a 26       	eor	r0, r26
 85c:	61 f0       	breq	.+24     	; 0x876 <__fp_cmp+0x46>
 85e:	23 2b       	or	r18, r19
 860:	24 2b       	or	r18, r20
 862:	25 2b       	or	r18, r21
 864:	21 f4       	brne	.+8      	; 0x86e <__fp_cmp+0x3e>
 866:	08 95       	ret
 868:	0a 26       	eor	r0, r26
 86a:	09 f4       	brne	.+2      	; 0x86e <__fp_cmp+0x3e>
 86c:	a1 40       	sbci	r26, 0x01	; 1
 86e:	a6 95       	lsr	r26
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	81 1d       	adc	r24, r1
 874:	81 1d       	adc	r24, r1
 876:	08 95       	ret

00000878 <__divmodhi4>:
 878:	97 fb       	bst	r25, 7
 87a:	07 2e       	mov	r0, r23
 87c:	16 f4       	brtc	.+4      	; 0x882 <__divmodhi4+0xa>
 87e:	00 94       	com	r0
 880:	07 d0       	rcall	.+14     	; 0x890 <__divmodhi4_neg1>
 882:	77 fd       	sbrc	r23, 7
 884:	09 d0       	rcall	.+18     	; 0x898 <__divmodhi4_neg2>
 886:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodhi4>
 88a:	07 fc       	sbrc	r0, 7
 88c:	05 d0       	rcall	.+10     	; 0x898 <__divmodhi4_neg2>
 88e:	3e f4       	brtc	.+14     	; 0x89e <__divmodhi4_exit>

00000890 <__divmodhi4_neg1>:
 890:	90 95       	com	r25
 892:	81 95       	neg	r24
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__divmodhi4_neg2>:
 898:	70 95       	com	r23
 89a:	61 95       	neg	r22
 89c:	7f 4f       	sbci	r23, 0xFF	; 255

0000089e <__divmodhi4_exit>:
 89e:	08 95       	ret

000008a0 <__divmodsi4>:
 8a0:	05 2e       	mov	r0, r21
 8a2:	97 fb       	bst	r25, 7
 8a4:	1e f4       	brtc	.+6      	; 0x8ac <__divmodsi4+0xc>
 8a6:	00 94       	com	r0
 8a8:	0e 94 67 04 	call	0x8ce	; 0x8ce <__negsi2>
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	07 d0       	rcall	.+14     	; 0x8be <__divmodsi4_neg2>
 8b0:	0e 94 83 04 	call	0x906	; 0x906 <__udivmodsi4>
 8b4:	07 fc       	sbrc	r0, 7
 8b6:	03 d0       	rcall	.+6      	; 0x8be <__divmodsi4_neg2>
 8b8:	4e f4       	brtc	.+18     	; 0x8cc <__divmodsi4_exit>
 8ba:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__negsi2>

000008be <__divmodsi4_neg2>:
 8be:	50 95       	com	r21
 8c0:	40 95       	com	r20
 8c2:	30 95       	com	r19
 8c4:	21 95       	neg	r18
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	4f 4f       	sbci	r20, 0xFF	; 255
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255

000008cc <__divmodsi4_exit>:
 8cc:	08 95       	ret

000008ce <__negsi2>:
 8ce:	90 95       	com	r25
 8d0:	80 95       	com	r24
 8d2:	70 95       	com	r23
 8d4:	61 95       	neg	r22
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	8f 4f       	sbci	r24, 0xFF	; 255
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	08 95       	ret

000008de <__udivmodhi4>:
 8de:	aa 1b       	sub	r26, r26
 8e0:	bb 1b       	sub	r27, r27
 8e2:	51 e1       	ldi	r21, 0x11	; 17
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__udivmodhi4_ep>

000008e6 <__udivmodhi4_loop>:
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	a6 17       	cp	r26, r22
 8ec:	b7 07       	cpc	r27, r23
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__udivmodhi4_ep>
 8f0:	a6 1b       	sub	r26, r22
 8f2:	b7 0b       	sbc	r27, r23

000008f4 <__udivmodhi4_ep>:
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	5a 95       	dec	r21
 8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__udivmodhi4_loop>
 8fc:	80 95       	com	r24
 8fe:	90 95       	com	r25
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	08 95       	ret

00000906 <__udivmodsi4>:
 906:	a1 e2       	ldi	r26, 0x21	; 33
 908:	1a 2e       	mov	r1, r26
 90a:	aa 1b       	sub	r26, r26
 90c:	bb 1b       	sub	r27, r27
 90e:	fd 01       	movw	r30, r26
 910:	0d c0       	rjmp	.+26     	; 0x92c <__udivmodsi4_ep>

00000912 <__udivmodsi4_loop>:
 912:	aa 1f       	adc	r26, r26
 914:	bb 1f       	adc	r27, r27
 916:	ee 1f       	adc	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	a2 17       	cp	r26, r18
 91c:	b3 07       	cpc	r27, r19
 91e:	e4 07       	cpc	r30, r20
 920:	f5 07       	cpc	r31, r21
 922:	20 f0       	brcs	.+8      	; 0x92c <__udivmodsi4_ep>
 924:	a2 1b       	sub	r26, r18
 926:	b3 0b       	sbc	r27, r19
 928:	e4 0b       	sbc	r30, r20
 92a:	f5 0b       	sbc	r31, r21

0000092c <__udivmodsi4_ep>:
 92c:	66 1f       	adc	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	1a 94       	dec	r1
 936:	69 f7       	brne	.-38     	; 0x912 <__udivmodsi4_loop>
 938:	60 95       	com	r22
 93a:	70 95       	com	r23
 93c:	80 95       	com	r24
 93e:	90 95       	com	r25
 940:	9b 01       	movw	r18, r22
 942:	ac 01       	movw	r20, r24
 944:	bd 01       	movw	r22, r26
 946:	cf 01       	movw	r24, r30
 948:	08 95       	ret

0000094a <_exit>:
 94a:	f8 94       	cli

0000094c <__stop_program>:
 94c:	ff cf       	rjmp	.-2      	; 0x94c <__stop_program>
