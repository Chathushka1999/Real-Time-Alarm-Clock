
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800320  00800320  00000bec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a04  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c5  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  9e:	0c 94 9a 04 	jmp	0x934	; 0x934 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
void playMelody();
void playNote(float duration, float frequency);
void ring_alarm(int song[]);

void setup(){
	DDRB = 0b00000000;    // set the push button pins as input mode
  a6:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00111100;
  a8:	8c e3       	ldi	r24, 0x3C	; 60
  aa:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b00011111;    // set the led /speaker connecting pins as an output mode
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD =0b00000000;    // set all the pins on off mode
  b0:	1b b8       	out	0x0b, r1	; 11
  b2:	08 95       	ret

000000b4 <_Z11my_delay_msd>:
}

void my_delay_ms(double ms){
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	6b 01       	movw	r12, r22
  be:	7c 01       	movw	r14, r24
	while (0 < ms){
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	c7 01       	movw	r24, r14
  c8:	b6 01       	movw	r22, r12
  ca:	0e 94 9b 03 	call	0x736	; 0x736 <__gesf2>
  ce:	18 16       	cp	r1, r24
  d0:	8c f4       	brge	.+34     	; 0xf4 <_Z11my_delay_msd+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z11my_delay_msd+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z11my_delay_msd+0x28>
  dc:	00 00       	nop
		_delay_ms(1);
		--ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e8       	ldi	r20, 0x80	; 128
  e4:	5f e3       	ldi	r21, 0x3F	; 63
  e6:	c7 01       	movw	r24, r14
  e8:	b6 01       	movw	r22, r12
  ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__subsf3>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
	DDRD = 0b00011111;    // set the led /speaker connecting pins as an output mode
	PORTD =0b00000000;    // set all the pins on off mode
}

void my_delay_ms(double ms){
	while (0 < ms){
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <_Z11my_delay_msd+0xc>
		_delay_ms(1);
		--ms;
	}
}
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	08 95       	ret

000000fe <_Z8playNotedf>:
    }
}

 
 
void playNote(double duration, float frequency){
  fe:	4f 92       	push	r4
 100:	5f 92       	push	r5
 102:	6f 92       	push	r6
 104:	7f 92       	push	r7
 106:	8f 92       	push	r8
 108:	9f 92       	push	r9
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	4b 01       	movw	r8, r22
 118:	5c 01       	movw	r10, r24
    long int i,cycles;
    double half_period;                // assigning the necessary variables
    float wavelength;
 
    wavelength=(1/frequency)*1000;    // find the wave length of the pulse from frequency
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	9f e3       	ldi	r25, 0x3F	; 63
 122:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4a e7       	ldi	r20, 0x7A	; 122
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 a0 03 	call	0x740	; 0x740 <__mulsf3>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
    cycles=duration/wavelength;       // The number of cycles.
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	c5 01       	movw	r24, r10
 13c:	b4 01       	movw	r22, r8
 13e:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divsf3>
 142:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fixsfsi>
 146:	2b 01       	movw	r4, r22
 148:	3c 01       	movw	r6, r24
    half_period = wavelength/2;       // The time between each toggle.
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	0e 94 a0 03 	call	0x740	; 0x740 <__mulsf3>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8a b9       	out	0x0a, r24	; 10
 
    for (i=0;i<cycles;i++){
 164:	c1 2c       	mov	r12, r1
 166:	d1 2c       	mov	r13, r1
 168:	76 01       	movw	r14, r12
 16a:	c4 14       	cp	r12, r4
 16c:	d5 04       	cpc	r13, r5
 16e:	e6 04       	cpc	r14, r6
 170:	f7 04       	cpc	r15, r7
 172:	a4 f4       	brge	.+40     	; 0x19c <_Z8playNotedf+0x9e>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT |= (1 << SPEAKER_PIN);                    // Output 5 V to port Pin 7.
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	8b b9       	out	0x0b, r24	; 11
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 182:	c5 01       	movw	r24, r10
 184:	b4 01       	movw	r22, r8
 186:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	8b b9       	out	0x0b, r24	; 11
    cycles=duration/wavelength;       // The number of cycles.
    half_period = wavelength/2;       // The time between each toggle.
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 
    for (i=0;i<cycles;i++){
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	c8 1a       	sub	r12, r24
 194:	d8 0a       	sbc	r13, r24
 196:	e8 0a       	sbc	r14, r24
 198:	f8 0a       	sbc	r15, r24
 19a:	e7 cf       	rjmp	.-50     	; 0x16a <_Z8playNotedf+0x6c>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
    }
 
    return; 
}
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	08 95       	ret

000001b6 <_Z10ring_alarmPi>:

void ring_alarm(int song[]){
 1b6:	2f 92       	push	r2
 1b8:	3f 92       	push	r3
 1ba:	4f 92       	push	r4
 1bc:	5f 92       	push	r5
 1be:	6f 92       	push	r6
 1c0:	7f 92       	push	r7
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7c 01       	movw	r14, r24
	int notes=song[0];
 1dc:	fc 01       	movw	r30, r24
 1de:	c0 80       	ld	r12, Z
 1e0:	d1 80       	ldd	r13, Z+1	; 0x01
	int tempo=song[1];
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	33 81       	ldd	r19, Z+3	; 0x03
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
 1e6:	03 2e       	mov	r0, r19
 1e8:	00 0c       	add	r0, r0
 1ea:	44 0b       	sbc	r20, r20
 1ec:	55 0b       	sbc	r21, r21
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	79 ea       	ldi	r23, 0xA9	; 169
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 45 04 	call	0x88a	; 0x88a <__divmodsi4>
 1fa:	19 01       	movw	r2, r18
	int divider = 0;
	double noteDuration = 0;
 1fc:	81 2c       	mov	r8, r1
 1fe:	91 2c       	mov	r9, r1
 200:	54 01       	movw	r10, r8
	/* iterate over the notes of the melody.*/
	while(1){
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 202:	02 e0       	ldi	r16, 0x02	; 2
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	c6 01       	movw	r24, r12
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	08 17       	cp	r16, r24
 20e:	19 07       	cpc	r17, r25
 210:	0c f0       	brlt	.+2      	; 0x214 <_Z10ring_alarmPi+0x5e>
 212:	93 c0       	rjmp	.+294    	; 0x33a <_Z10ring_alarmPi+0x184>
		divider = song[thisNote + 1];                                    // calculates the duration of each note
 214:	e8 01       	movw	r28, r16
 216:	f8 01       	movw	r30, r16
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0d       	add	r30, r14
 220:	ff 1d       	adc	r31, r15
 222:	60 81       	ld	r22, Z
 224:	71 81       	ldd	r23, Z+1	; 0x01
		if (divider > 0) {
 226:	16 16       	cp	r1, r22
 228:	17 06       	cpc	r1, r23
 22a:	64 f4       	brge	.+24     	; 0x244 <_Z10ring_alarmPi+0x8e>
		noteDuration = (wholenote) / divider;}                           // regular note, just proceed
 22c:	c1 01       	movw	r24, r2
 22e:	0e 94 31 04 	call	0x862	; 0x862 <__divmodhi4>
 232:	07 2e       	mov	r0, r23
 234:	00 0c       	add	r0, r0
 236:	88 0b       	sbc	r24, r24
 238:	99 0b       	sbc	r25, r25
 23a:	0e 94 0f 03 	call	0x61e	; 0x61e <__floatsisf>
 23e:	4b 01       	movw	r8, r22
 240:	5c 01       	movw	r10, r24
 242:	1b c0       	rjmp	.+54     	; 0x27a <_Z10ring_alarmPi+0xc4>
		else if (divider < 0) {
 244:	77 23       	and	r23, r23
 246:	cc f4       	brge	.+50     	; 0x27a <_Z10ring_alarmPi+0xc4>
			noteDuration = (wholenote) / abs(divider);                   // dotted notes are represented with negative durations!!
 248:	9b 01       	movw	r18, r22
 24a:	77 23       	and	r23, r23
 24c:	24 f4       	brge	.+8      	; 0x256 <_Z10ring_alarmPi+0xa0>
 24e:	22 27       	eor	r18, r18
 250:	33 27       	eor	r19, r19
 252:	26 1b       	sub	r18, r22
 254:	37 0b       	sbc	r19, r23
 256:	c1 01       	movw	r24, r2
 258:	b9 01       	movw	r22, r18
 25a:	0e 94 31 04 	call	0x862	; 0x862 <__divmodhi4>
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	0e 94 0f 03 	call	0x61e	; 0x61e <__floatsisf>
		noteDuration *= 1.5;}                                            // increases the duration in half for dotted notes
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 ec       	ldi	r20, 0xC0	; 192
 270:	5f e3       	ldi	r21, 0x3F	; 63
 272:	0e 94 a0 03 	call	0x740	; 0x740 <__mulsf3>
 276:	4b 01       	movw	r8, r22
 278:	5c 01       	movw	r10, r24
		if (!(PINB & (1<<3))){
 27a:	1b 99       	sbic	0x03, 3	; 3
 27c:	09 c0       	rjmp	.+18     	; 0x290 <_Z10ring_alarmPi+0xda>
			alarm_status=0;snooze=0;
 27e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 282:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 286:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 28a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
			return;}
 28e:	81 c0       	rjmp	.+258    	; 0x392 <_Z10ring_alarmPi+0x1dc>
		else if((!(PINB & (1<<2))) && snooze<3 ){
 290:	1a 99       	sbic	0x03, 2	; 3
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <_Z10ring_alarmPi+0xee>
 294:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 298:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 29c:	03 97       	sbiw	r24, 0x03	; 3
 29e:	24 f0       	brlt	.+8      	; 0x2a8 <_Z10ring_alarmPi+0xf2>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	88 23       	and	r24, r24
 2ac:	39 f0       	breq	.+14     	; 0x2bc <_Z10ring_alarmPi+0x106>
			//snooze=snooze+1;
			my_delay_ms(5000);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e4       	ldi	r23, 0x40	; 64
 2b2:	8c e9       	ldi	r24, 0x9C	; 156
 2b4:	95 e4       	ldi	r25, 0x45	; 69
 2b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
			break;
 2ba:	3f c0       	rjmp	.+126    	; 0x33a <_Z10ring_alarmPi+0x184>
			//ring_alarm(song);
			}
		else if((!(PINB & (1<<2))) && snooze==3 ){
 2bc:	1a 99       	sbic	0x03, 2	; 3
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <_Z10ring_alarmPi+0x11a>
 2c0:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <snooze>
 2c4:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <snooze+0x1>
 2c8:	23 30       	cpi	r18, 0x03	; 3
 2ca:	31 05       	cpc	r19, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <_Z10ring_alarmPi+0x11a>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	88 23       	and	r24, r24
 2d2:	49 f0       	breq	.+18     	; 0x2e6 <_Z10ring_alarmPi+0x130>
			snooze=0;alarm_status=0;
 2d4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 2d8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
 2dc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 2e0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
			return;}
 2e4:	56 c0       	rjmp	.+172    	; 0x392 <_Z10ring_alarmPi+0x1dc>
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
 2e6:	cc 0f       	add	r28, r28
 2e8:	dd 1f       	adc	r29, r29
 2ea:	ce 0d       	add	r28, r14
 2ec:	df 1d       	adc	r29, r15
 2ee:	68 81       	ld	r22, Y
 2f0:	79 81       	ldd	r23, Y+1	; 0x01
 2f2:	07 2e       	mov	r0, r23
 2f4:	00 0c       	add	r0, r0
 2f6:	88 0b       	sbc	r24, r24
 2f8:	99 0b       	sbc	r25, r25
 2fa:	0e 94 0f 03 	call	0x61e	; 0x61e <__floatsisf>
 2fe:	2b 01       	movw	r4, r22
 300:	3c 01       	movw	r6, r24
 302:	26 e6       	ldi	r18, 0x66	; 102
 304:	36 e6       	ldi	r19, 0x66	; 102
 306:	46 e6       	ldi	r20, 0x66	; 102
 308:	5f e3       	ldi	r21, 0x3F	; 63
 30a:	c5 01       	movw	r24, r10
 30c:	b4 01       	movw	r22, r8
 30e:	0e 94 a0 03 	call	0x740	; 0x740 <__mulsf3>
 312:	a3 01       	movw	r20, r6
 314:	92 01       	movw	r18, r4
 316:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
 31a:	c5 01       	movw	r24, r10
 31c:	b4 01       	movw	r22, r8
 31e:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
		playNote(1.0, 0);                                       // stop the waveform generation before the next note.
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	a9 01       	movw	r20, r18
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	9f e3       	ldi	r25, 0x3F	; 63
 330:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
	int divider = 0;
	double noteDuration = 0;
	/* iterate over the notes of the melody.*/
	while(1){
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 334:	0e 5f       	subi	r16, 0xFE	; 254
 336:	1f 4f       	sbci	r17, 0xFF	; 255
 338:	66 cf       	rjmp	.-308    	; 0x206 <_Z10ring_alarmPi+0x50>
			return;}
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
		playNote(1.0, 0);                                       // stop the waveform generation before the next note.
	}
	if (snooze>=0 && snooze<3 && alarm_status==1){
 33a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 33e:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	91 05       	cpc	r25, r1
 346:	98 f4       	brcc	.+38     	; 0x36e <_Z10ring_alarmPi+0x1b8>
 348:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <__data_end>
 34c:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <__data_end+0x1>
 350:	21 30       	cpi	r18, 0x01	; 1
 352:	31 05       	cpc	r19, r1
 354:	61 f4       	brne	.+24     	; 0x36e <_Z10ring_alarmPi+0x1b8>
		snooze=snooze+1;
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <snooze+0x1>
 35c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <snooze>
		my_delay_ms(5000);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e4       	ldi	r23, 0x40	; 64
 364:	8c e9       	ldi	r24, 0x9C	; 156
 366:	95 e4       	ldi	r25, 0x45	; 69
 368:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
 36c:	4a cf       	rjmp	.-364    	; 0x202 <_Z10ring_alarmPi+0x4c>
		//ring_alarm(song);
		}
	else if(snooze==3 && alarm_status==1){
 36e:	03 97       	sbiw	r24, 0x03	; 3
 370:	09 f0       	breq	.+2      	; 0x374 <_Z10ring_alarmPi+0x1be>
 372:	47 cf       	rjmp	.-370    	; 0x202 <_Z10ring_alarmPi+0x4c>
 374:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
 378:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <_Z10ring_alarmPi+0x1cc>
 380:	40 cf       	rjmp	.-384    	; 0x202 <_Z10ring_alarmPi+0x4c>
		alarm_status=0;snooze=0;
 382:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 386:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 38a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 38e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
		return;}
		}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	9f 90       	pop	r9
 3a8:	8f 90       	pop	r8
 3aa:	7f 90       	pop	r7
 3ac:	6f 90       	pop	r6
 3ae:	5f 90       	pop	r5
 3b0:	4f 90       	pop	r4
 3b2:	3f 90       	pop	r3
 3b4:	2f 90       	pop	r2
 3b6:	08 95       	ret

000003b8 <main>:
		--ms;
	}
}

int main(void){
	setup();
 3b8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
    while(1) {
		if(!(PINB & (1<<5))){
 3bc:	1d 99       	sbic	0x03, 5	; 3
 3be:	0b c0       	rjmp	.+22     	; 0x3d6 <main+0x1e>
			alarm_status=1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3c8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
		    ring_alarm(melody1);}
 3cc:	84 e5       	ldi	r24, 0x54	; 84
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 3d4:	f3 cf       	rjmp	.-26     	; 0x3bc <main+0x4>
		else if(!(PINB & (1<<4))){
 3d6:	1c 99       	sbic	0x03, 4	; 3
 3d8:	f1 cf       	rjmp	.-30     	; 0x3bc <main+0x4>
			alarm_status=1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3e2:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
			ring_alarm(melody2);}
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 3ee:	e6 cf       	rjmp	.-52     	; 0x3bc <main+0x4>

000003f0 <__subsf3>:
 3f0:	50 58       	subi	r21, 0x80	; 128

000003f2 <__addsf3>:
 3f2:	bb 27       	eor	r27, r27
 3f4:	aa 27       	eor	r26, r26
 3f6:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3x>
 3fa:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_round>
 3fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscA>
 402:	38 f0       	brcs	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_pscB>
 408:	20 f0       	brcs	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	39 f4       	brne	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40c:	9f 3f       	cpi	r25, 0xFF	; 255
 40e:	19 f4       	brne	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	26 f4       	brtc	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_nan>
 416:	0e f4       	brtc	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	e0 95       	com	r30
 41a:	e7 fb       	bst	r30, 7
 41c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>

00000420 <__addsf3x>:
 420:	e9 2f       	mov	r30, r25
 422:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fp_split3>
 426:	58 f3       	brcs	.-42     	; 0x3fe <__addsf3+0xc>
 428:	ba 17       	cp	r27, r26
 42a:	62 07       	cpc	r22, r18
 42c:	73 07       	cpc	r23, r19
 42e:	84 07       	cpc	r24, r20
 430:	95 07       	cpc	r25, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__addsf3x+0x1c>
 434:	79 f4       	brne	.+30     	; 0x454 <__addsf3x+0x34>
 436:	a6 f5       	brtc	.+104    	; 0x4a0 <__addsf3x+0x80>
 438:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_zero>
 43c:	0e f4       	brtc	.+2      	; 0x440 <__addsf3x+0x20>
 43e:	e0 95       	com	r30
 440:	0b 2e       	mov	r0, r27
 442:	ba 2f       	mov	r27, r26
 444:	a0 2d       	mov	r26, r0
 446:	0b 01       	movw	r0, r22
 448:	b9 01       	movw	r22, r18
 44a:	90 01       	movw	r18, r0
 44c:	0c 01       	movw	r0, r24
 44e:	ca 01       	movw	r24, r20
 450:	a0 01       	movw	r20, r0
 452:	11 24       	eor	r1, r1
 454:	ff 27       	eor	r31, r31
 456:	59 1b       	sub	r21, r25
 458:	99 f0       	breq	.+38     	; 0x480 <__addsf3x+0x60>
 45a:	59 3f       	cpi	r21, 0xF9	; 249
 45c:	50 f4       	brcc	.+20     	; 0x472 <__addsf3x+0x52>
 45e:	50 3e       	cpi	r21, 0xE0	; 224
 460:	68 f1       	brcs	.+90     	; 0x4bc <__addsf3x+0x9c>
 462:	1a 16       	cp	r1, r26
 464:	f0 40       	sbci	r31, 0x00	; 0
 466:	a2 2f       	mov	r26, r18
 468:	23 2f       	mov	r18, r19
 46a:	34 2f       	mov	r19, r20
 46c:	44 27       	eor	r20, r20
 46e:	58 5f       	subi	r21, 0xF8	; 248
 470:	f3 cf       	rjmp	.-26     	; 0x458 <__addsf3x+0x38>
 472:	46 95       	lsr	r20
 474:	37 95       	ror	r19
 476:	27 95       	ror	r18
 478:	a7 95       	ror	r26
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	53 95       	inc	r21
 47e:	c9 f7       	brne	.-14     	; 0x472 <__addsf3x+0x52>
 480:	7e f4       	brtc	.+30     	; 0x4a0 <__addsf3x+0x80>
 482:	1f 16       	cp	r1, r31
 484:	ba 0b       	sbc	r27, r26
 486:	62 0b       	sbc	r22, r18
 488:	73 0b       	sbc	r23, r19
 48a:	84 0b       	sbc	r24, r20
 48c:	ba f0       	brmi	.+46     	; 0x4bc <__addsf3x+0x9c>
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	a1 f0       	breq	.+40     	; 0x4ba <__addsf3x+0x9a>
 492:	ff 0f       	add	r31, r31
 494:	bb 1f       	adc	r27, r27
 496:	66 1f       	adc	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	c2 f7       	brpl	.-16     	; 0x48e <__addsf3x+0x6e>
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <__addsf3x+0x9c>
 4a0:	ba 0f       	add	r27, r26
 4a2:	62 1f       	adc	r22, r18
 4a4:	73 1f       	adc	r23, r19
 4a6:	84 1f       	adc	r24, r20
 4a8:	48 f4       	brcc	.+18     	; 0x4bc <__addsf3x+0x9c>
 4aa:	87 95       	ror	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b7 95       	ror	r27
 4b2:	f7 95       	ror	r31
 4b4:	9e 3f       	cpi	r25, 0xFE	; 254
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__addsf3x+0x9a>
 4b8:	b0 cf       	rjmp	.-160    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 4ba:	93 95       	inc	r25
 4bc:	88 0f       	add	r24, r24
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <__addsf3x+0xa2>
 4c0:	99 27       	eor	r25, r25
 4c2:	ee 0f       	add	r30, r30
 4c4:	97 95       	ror	r25
 4c6:	87 95       	ror	r24
 4c8:	08 95       	ret

000004ca <__divsf3>:
 4ca:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__divsf3x>
 4ce:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_round>
 4d2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_pscB>
 4d6:	58 f0       	brcs	.+22     	; 0x4ee <__divsf3+0x24>
 4d8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscA>
 4dc:	40 f0       	brcs	.+16     	; 0x4ee <__divsf3+0x24>
 4de:	29 f4       	brne	.+10     	; 0x4ea <__divsf3+0x20>
 4e0:	5f 3f       	cpi	r21, 0xFF	; 255
 4e2:	29 f0       	breq	.+10     	; 0x4ee <__divsf3+0x24>
 4e4:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 4e8:	51 11       	cpse	r21, r1
 4ea:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 4ee:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_nan>

000004f2 <__divsf3x>:
 4f2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fp_split3>
 4f6:	68 f3       	brcs	.-38     	; 0x4d2 <__divsf3+0x8>

000004f8 <__divsf3_pse>:
 4f8:	99 23       	and	r25, r25
 4fa:	b1 f3       	breq	.-20     	; 0x4e8 <__divsf3+0x1e>
 4fc:	55 23       	and	r21, r21
 4fe:	91 f3       	breq	.-28     	; 0x4e4 <__divsf3+0x1a>
 500:	95 1b       	sub	r25, r21
 502:	55 0b       	sbc	r21, r21
 504:	bb 27       	eor	r27, r27
 506:	aa 27       	eor	r26, r26
 508:	62 17       	cp	r22, r18
 50a:	73 07       	cpc	r23, r19
 50c:	84 07       	cpc	r24, r20
 50e:	38 f0       	brcs	.+14     	; 0x51e <__divsf3_pse+0x26>
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	44 1f       	adc	r20, r20
 51a:	aa 1f       	adc	r26, r26
 51c:	a9 f3       	breq	.-22     	; 0x508 <__divsf3_pse+0x10>
 51e:	35 d0       	rcall	.+106    	; 0x58a <__divsf3_pse+0x92>
 520:	0e 2e       	mov	r0, r30
 522:	3a f0       	brmi	.+14     	; 0x532 <__divsf3_pse+0x3a>
 524:	e0 e8       	ldi	r30, 0x80	; 128
 526:	32 d0       	rcall	.+100    	; 0x58c <__divsf3_pse+0x94>
 528:	91 50       	subi	r25, 0x01	; 1
 52a:	50 40       	sbci	r21, 0x00	; 0
 52c:	e6 95       	lsr	r30
 52e:	00 1c       	adc	r0, r0
 530:	ca f7       	brpl	.-14     	; 0x524 <__divsf3_pse+0x2c>
 532:	2b d0       	rcall	.+86     	; 0x58a <__divsf3_pse+0x92>
 534:	fe 2f       	mov	r31, r30
 536:	29 d0       	rcall	.+82     	; 0x58a <__divsf3_pse+0x92>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	bb 1f       	adc	r27, r27
 540:	26 17       	cp	r18, r22
 542:	37 07       	cpc	r19, r23
 544:	48 07       	cpc	r20, r24
 546:	ab 07       	cpc	r26, r27
 548:	b0 e8       	ldi	r27, 0x80	; 128
 54a:	09 f0       	breq	.+2      	; 0x54e <__divsf3_pse+0x56>
 54c:	bb 0b       	sbc	r27, r27
 54e:	80 2d       	mov	r24, r0
 550:	bf 01       	movw	r22, r30
 552:	ff 27       	eor	r31, r31
 554:	93 58       	subi	r25, 0x83	; 131
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	3a f0       	brmi	.+14     	; 0x568 <__divsf3_pse+0x70>
 55a:	9e 3f       	cpi	r25, 0xFE	; 254
 55c:	51 05       	cpc	r21, r1
 55e:	78 f0       	brcs	.+30     	; 0x57e <__divsf3_pse+0x86>
 560:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 564:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 568:	5f 3f       	cpi	r21, 0xFF	; 255
 56a:	e4 f3       	brlt	.-8      	; 0x564 <__divsf3_pse+0x6c>
 56c:	98 3e       	cpi	r25, 0xE8	; 232
 56e:	d4 f3       	brlt	.-12     	; 0x564 <__divsf3_pse+0x6c>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f7 95       	ror	r31
 57a:	9f 5f       	subi	r25, 0xFF	; 255
 57c:	c9 f7       	brne	.-14     	; 0x570 <__divsf3_pse+0x78>
 57e:	88 0f       	add	r24, r24
 580:	91 1d       	adc	r25, r1
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	97 f9       	bld	r25, 7
 588:	08 95       	ret
 58a:	e1 e0       	ldi	r30, 0x01	; 1
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	bb 1f       	adc	r27, r27
 594:	62 17       	cp	r22, r18
 596:	73 07       	cpc	r23, r19
 598:	84 07       	cpc	r24, r20
 59a:	ba 07       	cpc	r27, r26
 59c:	20 f0       	brcs	.+8      	; 0x5a6 <__divsf3_pse+0xae>
 59e:	62 1b       	sub	r22, r18
 5a0:	73 0b       	sbc	r23, r19
 5a2:	84 0b       	sbc	r24, r20
 5a4:	ba 0b       	sbc	r27, r26
 5a6:	ee 1f       	adc	r30, r30
 5a8:	88 f7       	brcc	.-30     	; 0x58c <__divsf3_pse+0x94>
 5aa:	e0 95       	com	r30
 5ac:	08 95       	ret

000005ae <__fixsfsi>:
 5ae:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fixunssfsi>
 5b2:	68 94       	set
 5b4:	b1 11       	cpse	r27, r1
 5b6:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 5ba:	08 95       	ret

000005bc <__fixunssfsi>:
 5bc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_splitA>
 5c0:	88 f0       	brcs	.+34     	; 0x5e4 <__fixunssfsi+0x28>
 5c2:	9f 57       	subi	r25, 0x7F	; 127
 5c4:	98 f0       	brcs	.+38     	; 0x5ec <__fixunssfsi+0x30>
 5c6:	b9 2f       	mov	r27, r25
 5c8:	99 27       	eor	r25, r25
 5ca:	b7 51       	subi	r27, 0x17	; 23
 5cc:	b0 f0       	brcs	.+44     	; 0x5fa <__fixunssfsi+0x3e>
 5ce:	e1 f0       	breq	.+56     	; 0x608 <__fixunssfsi+0x4c>
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	1a f0       	brmi	.+6      	; 0x5e0 <__fixunssfsi+0x24>
 5da:	ba 95       	dec	r27
 5dc:	c9 f7       	brne	.-14     	; 0x5d0 <__fixunssfsi+0x14>
 5de:	14 c0       	rjmp	.+40     	; 0x608 <__fixunssfsi+0x4c>
 5e0:	b1 30       	cpi	r27, 0x01	; 1
 5e2:	91 f0       	breq	.+36     	; 0x608 <__fixunssfsi+0x4c>
 5e4:	0e 94 94 03 	call	0x728	; 0x728 <__fp_zero>
 5e8:	b1 e0       	ldi	r27, 0x01	; 1
 5ea:	08 95       	ret
 5ec:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_zero>
 5f0:	67 2f       	mov	r22, r23
 5f2:	78 2f       	mov	r23, r24
 5f4:	88 27       	eor	r24, r24
 5f6:	b8 5f       	subi	r27, 0xF8	; 248
 5f8:	39 f0       	breq	.+14     	; 0x608 <__fixunssfsi+0x4c>
 5fa:	b9 3f       	cpi	r27, 0xF9	; 249
 5fc:	cc f3       	brlt	.-14     	; 0x5f0 <__fixunssfsi+0x34>
 5fe:	86 95       	lsr	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b3 95       	inc	r27
 606:	d9 f7       	brne	.-10     	; 0x5fe <__fixunssfsi+0x42>
 608:	3e f4       	brtc	.+14     	; 0x618 <__fixunssfsi+0x5c>
 60a:	90 95       	com	r25
 60c:	80 95       	com	r24
 60e:	70 95       	com	r23
 610:	61 95       	neg	r22
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	08 95       	ret

0000061a <__floatunsisf>:
 61a:	e8 94       	clt
 61c:	09 c0       	rjmp	.+18     	; 0x630 <__floatsisf+0x12>

0000061e <__floatsisf>:
 61e:	97 fb       	bst	r25, 7
 620:	3e f4       	brtc	.+14     	; 0x630 <__floatsisf+0x12>
 622:	90 95       	com	r25
 624:	80 95       	com	r24
 626:	70 95       	com	r23
 628:	61 95       	neg	r22
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	99 23       	and	r25, r25
 632:	a9 f0       	breq	.+42     	; 0x65e <__floatsisf+0x40>
 634:	f9 2f       	mov	r31, r25
 636:	96 e9       	ldi	r25, 0x96	; 150
 638:	bb 27       	eor	r27, r27
 63a:	93 95       	inc	r25
 63c:	f6 95       	lsr	r31
 63e:	87 95       	ror	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b7 95       	ror	r27
 646:	f1 11       	cpse	r31, r1
 648:	f8 cf       	rjmp	.-16     	; 0x63a <__floatsisf+0x1c>
 64a:	fa f4       	brpl	.+62     	; 0x68a <__floatsisf+0x6c>
 64c:	bb 0f       	add	r27, r27
 64e:	11 f4       	brne	.+4      	; 0x654 <__floatsisf+0x36>
 650:	60 ff       	sbrs	r22, 0
 652:	1b c0       	rjmp	.+54     	; 0x68a <__floatsisf+0x6c>
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	16 c0       	rjmp	.+44     	; 0x68a <__floatsisf+0x6c>
 65e:	88 23       	and	r24, r24
 660:	11 f0       	breq	.+4      	; 0x666 <__floatsisf+0x48>
 662:	96 e9       	ldi	r25, 0x96	; 150
 664:	11 c0       	rjmp	.+34     	; 0x688 <__floatsisf+0x6a>
 666:	77 23       	and	r23, r23
 668:	21 f0       	breq	.+8      	; 0x672 <__floatsisf+0x54>
 66a:	9e e8       	ldi	r25, 0x8E	; 142
 66c:	87 2f       	mov	r24, r23
 66e:	76 2f       	mov	r23, r22
 670:	05 c0       	rjmp	.+10     	; 0x67c <__floatsisf+0x5e>
 672:	66 23       	and	r22, r22
 674:	71 f0       	breq	.+28     	; 0x692 <__floatsisf+0x74>
 676:	96 e8       	ldi	r25, 0x86	; 134
 678:	86 2f       	mov	r24, r22
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	2a f0       	brmi	.+10     	; 0x68a <__floatsisf+0x6c>
 680:	9a 95       	dec	r25
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	da f7       	brpl	.-10     	; 0x680 <__floatsisf+0x62>
 68a:	88 0f       	add	r24, r24
 68c:	96 95       	lsr	r25
 68e:	87 95       	ror	r24
 690:	97 f9       	bld	r25, 7
 692:	08 95       	ret

00000694 <__fp_inf>:
 694:	97 f9       	bld	r25, 7
 696:	9f 67       	ori	r25, 0x7F	; 127
 698:	80 e8       	ldi	r24, 0x80	; 128
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	08 95       	ret

000006a0 <__fp_nan>:
 6a0:	9f ef       	ldi	r25, 0xFF	; 255
 6a2:	80 ec       	ldi	r24, 0xC0	; 192
 6a4:	08 95       	ret

000006a6 <__fp_pscA>:
 6a6:	00 24       	eor	r0, r0
 6a8:	0a 94       	dec	r0
 6aa:	16 16       	cp	r1, r22
 6ac:	17 06       	cpc	r1, r23
 6ae:	18 06       	cpc	r1, r24
 6b0:	09 06       	cpc	r0, r25
 6b2:	08 95       	ret

000006b4 <__fp_pscB>:
 6b4:	00 24       	eor	r0, r0
 6b6:	0a 94       	dec	r0
 6b8:	12 16       	cp	r1, r18
 6ba:	13 06       	cpc	r1, r19
 6bc:	14 06       	cpc	r1, r20
 6be:	05 06       	cpc	r0, r21
 6c0:	08 95       	ret

000006c2 <__fp_round>:
 6c2:	09 2e       	mov	r0, r25
 6c4:	03 94       	inc	r0
 6c6:	00 0c       	add	r0, r0
 6c8:	11 f4       	brne	.+4      	; 0x6ce <__fp_round+0xc>
 6ca:	88 23       	and	r24, r24
 6cc:	52 f0       	brmi	.+20     	; 0x6e2 <__fp_round+0x20>
 6ce:	bb 0f       	add	r27, r27
 6d0:	40 f4       	brcc	.+16     	; 0x6e2 <__fp_round+0x20>
 6d2:	bf 2b       	or	r27, r31
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0x18>
 6d6:	60 ff       	sbrs	r22, 0
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__fp_round+0x20>
 6da:	6f 5f       	subi	r22, 0xFF	; 255
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__fp_split3>:
 6e4:	57 fd       	sbrc	r21, 7
 6e6:	90 58       	subi	r25, 0x80	; 128
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	59 f0       	breq	.+22     	; 0x704 <__fp_splitA+0x10>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	71 f0       	breq	.+28     	; 0x70e <__fp_splitA+0x1a>
 6f2:	47 95       	ror	r20

000006f4 <__fp_splitA>:
 6f4:	88 0f       	add	r24, r24
 6f6:	97 fb       	bst	r25, 7
 6f8:	99 1f       	adc	r25, r25
 6fa:	61 f0       	breq	.+24     	; 0x714 <__fp_splitA+0x20>
 6fc:	9f 3f       	cpi	r25, 0xFF	; 255
 6fe:	79 f0       	breq	.+30     	; 0x71e <__fp_splitA+0x2a>
 700:	87 95       	ror	r24
 702:	08 95       	ret
 704:	12 16       	cp	r1, r18
 706:	13 06       	cpc	r1, r19
 708:	14 06       	cpc	r1, r20
 70a:	55 1f       	adc	r21, r21
 70c:	f2 cf       	rjmp	.-28     	; 0x6f2 <__fp_split3+0xe>
 70e:	46 95       	lsr	r20
 710:	f1 df       	rcall	.-30     	; 0x6f4 <__fp_splitA>
 712:	08 c0       	rjmp	.+16     	; 0x724 <__fp_splitA+0x30>
 714:	16 16       	cp	r1, r22
 716:	17 06       	cpc	r1, r23
 718:	18 06       	cpc	r1, r24
 71a:	99 1f       	adc	r25, r25
 71c:	f1 cf       	rjmp	.-30     	; 0x700 <__fp_splitA+0xc>
 71e:	86 95       	lsr	r24
 720:	71 05       	cpc	r23, r1
 722:	61 05       	cpc	r22, r1
 724:	08 94       	sec
 726:	08 95       	ret

00000728 <__fp_zero>:
 728:	e8 94       	clt

0000072a <__fp_szero>:
 72a:	bb 27       	eor	r27, r27
 72c:	66 27       	eor	r22, r22
 72e:	77 27       	eor	r23, r23
 730:	cb 01       	movw	r24, r22
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__gesf2>:
 736:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_cmp>
 73a:	08 f4       	brcc	.+2      	; 0x73e <__gesf2+0x8>
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__mulsf3>:
 740:	0e 94 b3 03 	call	0x766	; 0x766 <__mulsf3x>
 744:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_round>
 748:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscA>
 74c:	38 f0       	brcs	.+14     	; 0x75c <__mulsf3+0x1c>
 74e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_pscB>
 752:	20 f0       	brcs	.+8      	; 0x75c <__mulsf3+0x1c>
 754:	95 23       	and	r25, r21
 756:	11 f0       	breq	.+4      	; 0x75c <__mulsf3+0x1c>
 758:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 75c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_nan>
 760:	11 24       	eor	r1, r1
 762:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>

00000766 <__mulsf3x>:
 766:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fp_split3>
 76a:	70 f3       	brcs	.-36     	; 0x748 <__mulsf3+0x8>

0000076c <__mulsf3_pse>:
 76c:	95 9f       	mul	r25, r21
 76e:	c1 f3       	breq	.-16     	; 0x760 <__mulsf3+0x20>
 770:	95 0f       	add	r25, r21
 772:	50 e0       	ldi	r21, 0x00	; 0
 774:	55 1f       	adc	r21, r21
 776:	62 9f       	mul	r22, r18
 778:	f0 01       	movw	r30, r0
 77a:	72 9f       	mul	r23, r18
 77c:	bb 27       	eor	r27, r27
 77e:	f0 0d       	add	r31, r0
 780:	b1 1d       	adc	r27, r1
 782:	63 9f       	mul	r22, r19
 784:	aa 27       	eor	r26, r26
 786:	f0 0d       	add	r31, r0
 788:	b1 1d       	adc	r27, r1
 78a:	aa 1f       	adc	r26, r26
 78c:	64 9f       	mul	r22, r20
 78e:	66 27       	eor	r22, r22
 790:	b0 0d       	add	r27, r0
 792:	a1 1d       	adc	r26, r1
 794:	66 1f       	adc	r22, r22
 796:	82 9f       	mul	r24, r18
 798:	22 27       	eor	r18, r18
 79a:	b0 0d       	add	r27, r0
 79c:	a1 1d       	adc	r26, r1
 79e:	62 1f       	adc	r22, r18
 7a0:	73 9f       	mul	r23, r19
 7a2:	b0 0d       	add	r27, r0
 7a4:	a1 1d       	adc	r26, r1
 7a6:	62 1f       	adc	r22, r18
 7a8:	83 9f       	mul	r24, r19
 7aa:	a0 0d       	add	r26, r0
 7ac:	61 1d       	adc	r22, r1
 7ae:	22 1f       	adc	r18, r18
 7b0:	74 9f       	mul	r23, r20
 7b2:	33 27       	eor	r19, r19
 7b4:	a0 0d       	add	r26, r0
 7b6:	61 1d       	adc	r22, r1
 7b8:	23 1f       	adc	r18, r19
 7ba:	84 9f       	mul	r24, r20
 7bc:	60 0d       	add	r22, r0
 7be:	21 1d       	adc	r18, r1
 7c0:	82 2f       	mov	r24, r18
 7c2:	76 2f       	mov	r23, r22
 7c4:	6a 2f       	mov	r22, r26
 7c6:	11 24       	eor	r1, r1
 7c8:	9f 57       	subi	r25, 0x7F	; 127
 7ca:	50 40       	sbci	r21, 0x00	; 0
 7cc:	9a f0       	brmi	.+38     	; 0x7f4 <__mulsf3_pse+0x88>
 7ce:	f1 f0       	breq	.+60     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7d0:	88 23       	and	r24, r24
 7d2:	4a f0       	brmi	.+18     	; 0x7e6 <__mulsf3_pse+0x7a>
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	bb 1f       	adc	r27, r27
 7da:	66 1f       	adc	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	91 50       	subi	r25, 0x01	; 1
 7e2:	50 40       	sbci	r21, 0x00	; 0
 7e4:	a9 f7       	brne	.-22     	; 0x7d0 <__mulsf3_pse+0x64>
 7e6:	9e 3f       	cpi	r25, 0xFE	; 254
 7e8:	51 05       	cpc	r21, r1
 7ea:	80 f0       	brcs	.+32     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ec:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 7f0:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	e4 f3       	brlt	.-8      	; 0x7f0 <__mulsf3_pse+0x84>
 7f8:	98 3e       	cpi	r25, 0xE8	; 232
 7fa:	d4 f3       	brlt	.-12     	; 0x7f0 <__mulsf3_pse+0x84>
 7fc:	86 95       	lsr	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	b7 95       	ror	r27
 804:	f7 95       	ror	r31
 806:	e7 95       	ror	r30
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	c1 f7       	brne	.-16     	; 0x7fc <__mulsf3_pse+0x90>
 80c:	fe 2b       	or	r31, r30
 80e:	88 0f       	add	r24, r24
 810:	91 1d       	adc	r25, r1
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	97 f9       	bld	r25, 7
 818:	08 95       	ret

0000081a <__fp_cmp>:
 81a:	99 0f       	add	r25, r25
 81c:	00 08       	sbc	r0, r0
 81e:	55 0f       	add	r21, r21
 820:	aa 0b       	sbc	r26, r26
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	fe ef       	ldi	r31, 0xFE	; 254
 826:	16 16       	cp	r1, r22
 828:	17 06       	cpc	r1, r23
 82a:	e8 07       	cpc	r30, r24
 82c:	f9 07       	cpc	r31, r25
 82e:	c0 f0       	brcs	.+48     	; 0x860 <__fp_cmp+0x46>
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	e4 07       	cpc	r30, r20
 836:	f5 07       	cpc	r31, r21
 838:	98 f0       	brcs	.+38     	; 0x860 <__fp_cmp+0x46>
 83a:	62 1b       	sub	r22, r18
 83c:	73 0b       	sbc	r23, r19
 83e:	84 0b       	sbc	r24, r20
 840:	95 0b       	sbc	r25, r21
 842:	39 f4       	brne	.+14     	; 0x852 <__fp_cmp+0x38>
 844:	0a 26       	eor	r0, r26
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_cmp+0x46>
 848:	23 2b       	or	r18, r19
 84a:	24 2b       	or	r18, r20
 84c:	25 2b       	or	r18, r21
 84e:	21 f4       	brne	.+8      	; 0x858 <__fp_cmp+0x3e>
 850:	08 95       	ret
 852:	0a 26       	eor	r0, r26
 854:	09 f4       	brne	.+2      	; 0x858 <__fp_cmp+0x3e>
 856:	a1 40       	sbci	r26, 0x01	; 1
 858:	a6 95       	lsr	r26
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	81 1d       	adc	r24, r1
 85e:	81 1d       	adc	r24, r1
 860:	08 95       	ret

00000862 <__divmodhi4>:
 862:	97 fb       	bst	r25, 7
 864:	07 2e       	mov	r0, r23
 866:	16 f4       	brtc	.+4      	; 0x86c <__divmodhi4+0xa>
 868:	00 94       	com	r0
 86a:	07 d0       	rcall	.+14     	; 0x87a <__divmodhi4_neg1>
 86c:	77 fd       	sbrc	r23, 7
 86e:	09 d0       	rcall	.+18     	; 0x882 <__divmodhi4_neg2>
 870:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__udivmodhi4>
 874:	07 fc       	sbrc	r0, 7
 876:	05 d0       	rcall	.+10     	; 0x882 <__divmodhi4_neg2>
 878:	3e f4       	brtc	.+14     	; 0x888 <__divmodhi4_exit>

0000087a <__divmodhi4_neg1>:
 87a:	90 95       	com	r25
 87c:	81 95       	neg	r24
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__divmodhi4_neg2>:
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255

00000888 <__divmodhi4_exit>:
 888:	08 95       	ret

0000088a <__divmodsi4>:
 88a:	05 2e       	mov	r0, r21
 88c:	97 fb       	bst	r25, 7
 88e:	1e f4       	brtc	.+6      	; 0x896 <__divmodsi4+0xc>
 890:	00 94       	com	r0
 892:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__negsi2>
 896:	57 fd       	sbrc	r21, 7
 898:	07 d0       	rcall	.+14     	; 0x8a8 <__divmodsi4_neg2>
 89a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__udivmodsi4>
 89e:	07 fc       	sbrc	r0, 7
 8a0:	03 d0       	rcall	.+6      	; 0x8a8 <__divmodsi4_neg2>
 8a2:	4e f4       	brtc	.+18     	; 0x8b6 <__divmodsi4_exit>
 8a4:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__negsi2>

000008a8 <__divmodsi4_neg2>:
 8a8:	50 95       	com	r21
 8aa:	40 95       	com	r20
 8ac:	30 95       	com	r19
 8ae:	21 95       	neg	r18
 8b0:	3f 4f       	sbci	r19, 0xFF	; 255
 8b2:	4f 4f       	sbci	r20, 0xFF	; 255
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255

000008b6 <__divmodsi4_exit>:
 8b6:	08 95       	ret

000008b8 <__negsi2>:
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__udivmodhi4>:
 8c8:	aa 1b       	sub	r26, r26
 8ca:	bb 1b       	sub	r27, r27
 8cc:	51 e1       	ldi	r21, 0x11	; 17
 8ce:	07 c0       	rjmp	.+14     	; 0x8de <__udivmodhi4_ep>

000008d0 <__udivmodhi4_loop>:
 8d0:	aa 1f       	adc	r26, r26
 8d2:	bb 1f       	adc	r27, r27
 8d4:	a6 17       	cp	r26, r22
 8d6:	b7 07       	cpc	r27, r23
 8d8:	10 f0       	brcs	.+4      	; 0x8de <__udivmodhi4_ep>
 8da:	a6 1b       	sub	r26, r22
 8dc:	b7 0b       	sbc	r27, r23

000008de <__udivmodhi4_ep>:
 8de:	88 1f       	adc	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	5a 95       	dec	r21
 8e4:	a9 f7       	brne	.-22     	; 0x8d0 <__udivmodhi4_loop>
 8e6:	80 95       	com	r24
 8e8:	90 95       	com	r25
 8ea:	bc 01       	movw	r22, r24
 8ec:	cd 01       	movw	r24, r26
 8ee:	08 95       	ret

000008f0 <__udivmodsi4>:
 8f0:	a1 e2       	ldi	r26, 0x21	; 33
 8f2:	1a 2e       	mov	r1, r26
 8f4:	aa 1b       	sub	r26, r26
 8f6:	bb 1b       	sub	r27, r27
 8f8:	fd 01       	movw	r30, r26
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__udivmodsi4_ep>

000008fc <__udivmodsi4_loop>:
 8fc:	aa 1f       	adc	r26, r26
 8fe:	bb 1f       	adc	r27, r27
 900:	ee 1f       	adc	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	a2 17       	cp	r26, r18
 906:	b3 07       	cpc	r27, r19
 908:	e4 07       	cpc	r30, r20
 90a:	f5 07       	cpc	r31, r21
 90c:	20 f0       	brcs	.+8      	; 0x916 <__udivmodsi4_ep>
 90e:	a2 1b       	sub	r26, r18
 910:	b3 0b       	sbc	r27, r19
 912:	e4 0b       	sbc	r30, r20
 914:	f5 0b       	sbc	r31, r21

00000916 <__udivmodsi4_ep>:
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	1a 94       	dec	r1
 920:	69 f7       	brne	.-38     	; 0x8fc <__udivmodsi4_loop>
 922:	60 95       	com	r22
 924:	70 95       	com	r23
 926:	80 95       	com	r24
 928:	90 95       	com	r25
 92a:	9b 01       	movw	r18, r22
 92c:	ac 01       	movw	r20, r24
 92e:	bd 01       	movw	r22, r26
 930:	cf 01       	movw	r24, r30
 932:	08 95       	ret

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
