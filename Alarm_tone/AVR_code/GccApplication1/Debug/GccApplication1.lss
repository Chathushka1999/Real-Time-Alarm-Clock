
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800320  00800320  00000bde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e0  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000462  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c5  00000000  00000000  000027fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  9e:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
void playMelody();
void playNote(float duration, float frequency);
void ring_alarm(int song[]);

void setup(){
	DDRB = 0b00000000;    // set the push button pins as input mode
  a6:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00111100;
  a8:	8c e3       	ldi	r24, 0x3C	; 60
  aa:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b00011111;    // set the led /speaker connecting pins as an output mode
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD =0b00000000;    // set all the pins on off mode
  b0:	1b b8       	out	0x0b, r1	; 11
  b2:	08 95       	ret

000000b4 <_Z11my_delay_msd>:
}

void my_delay_ms(double ms){
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	6b 01       	movw	r12, r22
  be:	7c 01       	movw	r14, r24
	while (0 < ms){
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	c7 01       	movw	r24, r14
  c8:	b6 01       	movw	r22, r12
  ca:	0e 94 94 03 	call	0x728	; 0x728 <__gesf2>
  ce:	18 16       	cp	r1, r24
  d0:	8c f4       	brge	.+34     	; 0xf4 <_Z11my_delay_msd+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z11my_delay_msd+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z11my_delay_msd+0x28>
  dc:	00 00       	nop
		_delay_ms(1);
		--ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e8       	ldi	r20, 0x80	; 128
  e4:	5f e3       	ldi	r21, 0x3F	; 63
  e6:	c7 01       	movw	r24, r14
  e8:	b6 01       	movw	r22, r12
  ea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__subsf3>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
	DDRD = 0b00011111;    // set the led /speaker connecting pins as an output mode
	PORTD =0b00000000;    // set all the pins on off mode
}

void my_delay_ms(double ms){
	while (0 < ms){
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <_Z11my_delay_msd+0xc>
		_delay_ms(1);
		--ms;
	}
}
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	08 95       	ret

000000fe <_Z8playNotedf>:
     }
}

 
 
void playNote(double duration, float frequency){
  fe:	4f 92       	push	r4
 100:	5f 92       	push	r5
 102:	6f 92       	push	r6
 104:	7f 92       	push	r7
 106:	8f 92       	push	r8
 108:	9f 92       	push	r9
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	4b 01       	movw	r8, r22
 118:	5c 01       	movw	r10, r24
    long int i,cycles;
    double half_period;                // assigning the necessary variables
    float wavelength;
 
    wavelength=(1/frequency)*1000;    // find the wave length of the pulse from frequency
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	9f e3       	ldi	r25, 0x3F	; 63
 122:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__divsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4a e7       	ldi	r20, 0x7A	; 122
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
    cycles=duration/wavelength;       // The number of cycles.
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	c5 01       	movw	r24, r10
 13c:	b4 01       	movw	r22, r8
 13e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__divsf3>
 142:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fixsfsi>
 146:	2b 01       	movw	r4, r22
 148:	3c 01       	movw	r6, r24
    half_period = wavelength/2;       // The time between each toggle.
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8a b9       	out	0x0a, r24	; 10
 
    for (i=0;i<cycles;i++){
 164:	c1 2c       	mov	r12, r1
 166:	d1 2c       	mov	r13, r1
 168:	76 01       	movw	r14, r12
 16a:	c4 14       	cp	r12, r4
 16c:	d5 04       	cpc	r13, r5
 16e:	e6 04       	cpc	r14, r6
 170:	f7 04       	cpc	r15, r7
 172:	a4 f4       	brge	.+40     	; 0x19c <_Z8playNotedf+0x9e>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT |= (1 << SPEAKER_PIN);                    // Output 5 V to port Pin 7.
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	8b b9       	out	0x0b, r24	; 11
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
 182:	c5 01       	movw	r24, r10
 184:	b4 01       	movw	r22, r8
 186:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	8b b9       	out	0x0b, r24	; 11
    cycles=duration/wavelength;       // The number of cycles.
    half_period = wavelength/2;       // The time between each toggle.
    
    SPEAKER_DDR |= (1 << SPEAKER_PIN);
 
    for (i=0;i<cycles;i++){
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	c8 1a       	sub	r12, r24
 194:	d8 0a       	sbc	r13, r24
 196:	e8 0a       	sbc	r14, r24
 198:	f8 0a       	sbc	r15, r24
 19a:	e7 cf       	rjmp	.-50     	; 0x16a <_Z8playNotedf+0x6c>
        my_delay_ms(half_period);                              // Wait 1 half wavelength.
        SPEAKER_PORT &= ~(1 << SPEAKER_PIN);                   // 0 V at port pin 7.
    }
 
    return; 
}
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	08 95       	ret

000001b6 <_Z10ring_alarmPi>:

void ring_alarm(int song[]){
 1b6:	2f 92       	push	r2
 1b8:	3f 92       	push	r3
 1ba:	4f 92       	push	r4
 1bc:	5f 92       	push	r5
 1be:	6f 92       	push	r6
 1c0:	7f 92       	push	r7
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7c 01       	movw	r14, r24
	int notes=song[0];
 1dc:	fc 01       	movw	r30, r24
 1de:	c0 80       	ld	r12, Z
 1e0:	d1 80       	ldd	r13, Z+1	; 0x01
	int tempo=song[1];
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	33 81       	ldd	r19, Z+3	; 0x03
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
 1e6:	03 2e       	mov	r0, r19
 1e8:	00 0c       	add	r0, r0
 1ea:	44 0b       	sbc	r20, r20
 1ec:	55 0b       	sbc	r21, r21
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	79 ea       	ldi	r23, 0xA9	; 169
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 3e 04 	call	0x87c	; 0x87c <__divmodsi4>
 1fa:	19 01       	movw	r2, r18
	int divider = 0;
	double noteDuration = 0;
 1fc:	81 2c       	mov	r8, r1
 1fe:	91 2c       	mov	r9, r1
 200:	54 01       	movw	r10, r8
	/* iterate over the notes of the melody.*/
	while(1){
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 202:	02 e0       	ldi	r16, 0x02	; 2
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	c6 01       	movw	r24, r12
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	08 17       	cp	r16, r24
 20e:	19 07       	cpc	r17, r25
 210:	0c f0       	brlt	.+2      	; 0x214 <_Z10ring_alarmPi+0x5e>
 212:	8c c0       	rjmp	.+280    	; 0x32c <_Z10ring_alarmPi+0x176>
		divider = song[thisNote + 1];                                    // calculates the duration of each note
 214:	e8 01       	movw	r28, r16
 216:	f8 01       	movw	r30, r16
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0d       	add	r30, r14
 220:	ff 1d       	adc	r31, r15
 222:	60 81       	ld	r22, Z
 224:	71 81       	ldd	r23, Z+1	; 0x01
		if (divider > 0) {
 226:	16 16       	cp	r1, r22
 228:	17 06       	cpc	r1, r23
 22a:	64 f4       	brge	.+24     	; 0x244 <_Z10ring_alarmPi+0x8e>
		noteDuration = (wholenote) / divider;}                           // regular note, just proceed
 22c:	c1 01       	movw	r24, r2
 22e:	0e 94 2a 04 	call	0x854	; 0x854 <__divmodhi4>
 232:	07 2e       	mov	r0, r23
 234:	00 0c       	add	r0, r0
 236:	88 0b       	sbc	r24, r24
 238:	99 0b       	sbc	r25, r25
 23a:	0e 94 08 03 	call	0x610	; 0x610 <__floatsisf>
 23e:	4b 01       	movw	r8, r22
 240:	5c 01       	movw	r10, r24
 242:	1b c0       	rjmp	.+54     	; 0x27a <_Z10ring_alarmPi+0xc4>
		else if (divider < 0) {
 244:	77 23       	and	r23, r23
 246:	cc f4       	brge	.+50     	; 0x27a <_Z10ring_alarmPi+0xc4>
			noteDuration = (wholenote) / abs(divider);                   // dotted notes are represented with negative durations!!
 248:	9b 01       	movw	r18, r22
 24a:	77 23       	and	r23, r23
 24c:	24 f4       	brge	.+8      	; 0x256 <_Z10ring_alarmPi+0xa0>
 24e:	22 27       	eor	r18, r18
 250:	33 27       	eor	r19, r19
 252:	26 1b       	sub	r18, r22
 254:	37 0b       	sbc	r19, r23
 256:	c1 01       	movw	r24, r2
 258:	b9 01       	movw	r22, r18
 25a:	0e 94 2a 04 	call	0x854	; 0x854 <__divmodhi4>
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	0e 94 08 03 	call	0x610	; 0x610 <__floatsisf>
		noteDuration *= 1.5;}                                            // increases the duration in half for dotted notes
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 ec       	ldi	r20, 0xC0	; 192
 270:	5f e3       	ldi	r21, 0x3F	; 63
 272:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 276:	4b 01       	movw	r8, r22
 278:	5c 01       	movw	r10, r24
		if (!(PINB & (1<<3))){
 27a:	1b 99       	sbic	0x03, 3	; 3
 27c:	09 c0       	rjmp	.+18     	; 0x290 <_Z10ring_alarmPi+0xda>
			alarm_status=0;snooze=0;
 27e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 282:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 286:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 28a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
			return;}
 28e:	7a c0       	rjmp	.+244    	; 0x384 <_Z10ring_alarmPi+0x1ce>
		else if((!(PINB & (1<<2))) && snooze<3 ){
 290:	1a 99       	sbic	0x03, 2	; 3
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <_Z10ring_alarmPi+0xee>
 294:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 298:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 29c:	03 97       	sbiw	r24, 0x03	; 3
 29e:	24 f0       	brlt	.+8      	; 0x2a8 <_Z10ring_alarmPi+0xf2>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <_Z10ring_alarmPi+0xf4>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	81 11       	cpse	r24, r1
 2ac:	3f c0       	rjmp	.+126    	; 0x32c <_Z10ring_alarmPi+0x176>
			break;}
		else if((!(PINB & (1<<2))) && snooze==3 ){
 2ae:	1a 99       	sbic	0x03, 2	; 3
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_Z10ring_alarmPi+0x10c>
 2b2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <snooze>
 2b6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <snooze+0x1>
 2ba:	23 30       	cpi	r18, 0x03	; 3
 2bc:	31 05       	cpc	r19, r1
 2be:	09 f4       	brne	.+2      	; 0x2c2 <_Z10ring_alarmPi+0x10c>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	88 23       	and	r24, r24
 2c4:	49 f0       	breq	.+18     	; 0x2d8 <_Z10ring_alarmPi+0x122>
			snooze=0;alarm_status=0;
 2c6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 2ca:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
 2ce:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 2d2:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
			return;}
 2d6:	56 c0       	rjmp	.+172    	; 0x384 <_Z10ring_alarmPi+0x1ce>
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
 2d8:	cc 0f       	add	r28, r28
 2da:	dd 1f       	adc	r29, r29
 2dc:	ce 0d       	add	r28, r14
 2de:	df 1d       	adc	r29, r15
 2e0:	68 81       	ld	r22, Y
 2e2:	79 81       	ldd	r23, Y+1	; 0x01
 2e4:	07 2e       	mov	r0, r23
 2e6:	00 0c       	add	r0, r0
 2e8:	88 0b       	sbc	r24, r24
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 08 03 	call	0x610	; 0x610 <__floatsisf>
 2f0:	2b 01       	movw	r4, r22
 2f2:	3c 01       	movw	r6, r24
 2f4:	26 e6       	ldi	r18, 0x66	; 102
 2f6:	36 e6       	ldi	r19, 0x66	; 102
 2f8:	46 e6       	ldi	r20, 0x66	; 102
 2fa:	5f e3       	ldi	r21, 0x3F	; 63
 2fc:	c5 01       	movw	r24, r10
 2fe:	b4 01       	movw	r22, r8
 300:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 304:	a3 01       	movw	r20, r6
 306:	92 01       	movw	r18, r4
 308:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
 30c:	c5 01       	movw	r24, r10
 30e:	b4 01       	movw	r22, r8
 310:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
		playNote(1.0, 0);                                                // stop the waveform generation before the next note.
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	a9 01       	movw	r20, r18
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	9f e3       	ldi	r25, 0x3F	; 63
 322:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8playNotedf>
	int wholenote = (60000 * 4) / tempo;                                 // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
	int divider = 0;
	double noteDuration = 0;
	/* iterate over the notes of the melody.*/
	while(1){
	for (int thisNote = 2; thisNote < notes * 2; thisNote = thisNote + 2) {
 326:	0e 5f       	subi	r16, 0xFE	; 254
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	6d cf       	rjmp	.-294    	; 0x206 <_Z10ring_alarmPi+0x50>
			return;}
		playNote( noteDuration * 0.9, song[thisNote]);                   // we only play the note for 90% of the duration, leaving 10% as a pause
		my_delay_ms(noteDuration);                                       // Wait for the specif duration before playing the next note.
		playNote(1.0, 0);                                                // stop the waveform generation before the next note.
	}
	if (snooze>=0 && snooze<3 && alarm_status==1){
 32c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <snooze>
 330:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <snooze+0x1>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	91 05       	cpc	r25, r1
 338:	98 f4       	brcc	.+38     	; 0x360 <_Z10ring_alarmPi+0x1aa>
 33a:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <__data_end>
 33e:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <__data_end+0x1>
 342:	21 30       	cpi	r18, 0x01	; 1
 344:	31 05       	cpc	r19, r1
 346:	61 f4       	brne	.+24     	; 0x360 <_Z10ring_alarmPi+0x1aa>
		snooze=snooze+1;
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <snooze+0x1>
 34e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <snooze>
		my_delay_ms(5000);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	70 e4       	ldi	r23, 0x40	; 64
 356:	8c e9       	ldi	r24, 0x9C	; 156
 358:	95 e4       	ldi	r25, 0x45	; 69
 35a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z11my_delay_msd>
 35e:	51 cf       	rjmp	.-350    	; 0x202 <_Z10ring_alarmPi+0x4c>
		}
	else if(snooze==3 && alarm_status==1){
 360:	03 97       	sbiw	r24, 0x03	; 3
 362:	09 f0       	breq	.+2      	; 0x366 <_Z10ring_alarmPi+0x1b0>
 364:	4e cf       	rjmp	.-356    	; 0x202 <_Z10ring_alarmPi+0x4c>
 366:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
 36a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	09 f0       	breq	.+2      	; 0x374 <_Z10ring_alarmPi+0x1be>
 372:	47 cf       	rjmp	.-370    	; 0x202 <_Z10ring_alarmPi+0x4c>
		alarm_status=0;snooze=0;
 374:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 378:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 37c:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <snooze+0x1>
 380:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <snooze>
		return;}
	}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	bf 90       	pop	r11
 396:	af 90       	pop	r10
 398:	9f 90       	pop	r9
 39a:	8f 90       	pop	r8
 39c:	7f 90       	pop	r7
 39e:	6f 90       	pop	r6
 3a0:	5f 90       	pop	r5
 3a2:	4f 90       	pop	r4
 3a4:	3f 90       	pop	r3
 3a6:	2f 90       	pop	r2
 3a8:	08 95       	ret

000003aa <main>:
}

int main(void){
	
	
 	setup();
 3aa:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
     while(1) {
 		if(!(PINB & (1<<5))){
 3ae:	1d 99       	sbic	0x03, 5	; 3
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <main+0x1e>
 			alarm_status=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3ba:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
 		    ring_alarm(melody1);}
 3be:	84 e5       	ldi	r24, 0x54	; 84
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 3c6:	f3 cf       	rjmp	.-26     	; 0x3ae <main+0x4>
 		else if(!(PINB & (1<<4))){
 3c8:	1c 99       	sbic	0x03, 4	; 3
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <main+0x4>
 			alarm_status=1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3d4:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
 			ring_alarm(melody2);}
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z10ring_alarmPi>
 3e0:	e6 cf       	rjmp	.-52     	; 0x3ae <main+0x4>

000003e2 <__subsf3>:
 3e2:	50 58       	subi	r21, 0x80	; 128

000003e4 <__addsf3>:
 3e4:	bb 27       	eor	r27, r27
 3e6:	aa 27       	eor	r26, r26
 3e8:	0e 94 09 02 	call	0x412	; 0x412 <__addsf3x>
 3ec:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_round>
 3f0:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_pscA>
 3f4:	38 f0       	brcs	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscB>
 3fa:	20 f0       	brcs	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	39 f4       	brne	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fe:	9f 3f       	cpi	r25, 0xFF	; 255
 400:	19 f4       	brne	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 402:	26 f4       	brtc	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_nan>
 408:	0e f4       	brtc	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	e0 95       	com	r30
 40c:	e7 fb       	bst	r30, 7
 40e:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>

00000412 <__addsf3x>:
 412:	e9 2f       	mov	r30, r25
 414:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_split3>
 418:	58 f3       	brcs	.-42     	; 0x3f0 <__addsf3+0xc>
 41a:	ba 17       	cp	r27, r26
 41c:	62 07       	cpc	r22, r18
 41e:	73 07       	cpc	r23, r19
 420:	84 07       	cpc	r24, r20
 422:	95 07       	cpc	r25, r21
 424:	20 f0       	brcs	.+8      	; 0x42e <__addsf3x+0x1c>
 426:	79 f4       	brne	.+30     	; 0x446 <__addsf3x+0x34>
 428:	a6 f5       	brtc	.+104    	; 0x492 <__addsf3x+0x80>
 42a:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__fp_zero>
 42e:	0e f4       	brtc	.+2      	; 0x432 <__addsf3x+0x20>
 430:	e0 95       	com	r30
 432:	0b 2e       	mov	r0, r27
 434:	ba 2f       	mov	r27, r26
 436:	a0 2d       	mov	r26, r0
 438:	0b 01       	movw	r0, r22
 43a:	b9 01       	movw	r22, r18
 43c:	90 01       	movw	r18, r0
 43e:	0c 01       	movw	r0, r24
 440:	ca 01       	movw	r24, r20
 442:	a0 01       	movw	r20, r0
 444:	11 24       	eor	r1, r1
 446:	ff 27       	eor	r31, r31
 448:	59 1b       	sub	r21, r25
 44a:	99 f0       	breq	.+38     	; 0x472 <__addsf3x+0x60>
 44c:	59 3f       	cpi	r21, 0xF9	; 249
 44e:	50 f4       	brcc	.+20     	; 0x464 <__addsf3x+0x52>
 450:	50 3e       	cpi	r21, 0xE0	; 224
 452:	68 f1       	brcs	.+90     	; 0x4ae <__addsf3x+0x9c>
 454:	1a 16       	cp	r1, r26
 456:	f0 40       	sbci	r31, 0x00	; 0
 458:	a2 2f       	mov	r26, r18
 45a:	23 2f       	mov	r18, r19
 45c:	34 2f       	mov	r19, r20
 45e:	44 27       	eor	r20, r20
 460:	58 5f       	subi	r21, 0xF8	; 248
 462:	f3 cf       	rjmp	.-26     	; 0x44a <__addsf3x+0x38>
 464:	46 95       	lsr	r20
 466:	37 95       	ror	r19
 468:	27 95       	ror	r18
 46a:	a7 95       	ror	r26
 46c:	f0 40       	sbci	r31, 0x00	; 0
 46e:	53 95       	inc	r21
 470:	c9 f7       	brne	.-14     	; 0x464 <__addsf3x+0x52>
 472:	7e f4       	brtc	.+30     	; 0x492 <__addsf3x+0x80>
 474:	1f 16       	cp	r1, r31
 476:	ba 0b       	sbc	r27, r26
 478:	62 0b       	sbc	r22, r18
 47a:	73 0b       	sbc	r23, r19
 47c:	84 0b       	sbc	r24, r20
 47e:	ba f0       	brmi	.+46     	; 0x4ae <__addsf3x+0x9c>
 480:	91 50       	subi	r25, 0x01	; 1
 482:	a1 f0       	breq	.+40     	; 0x4ac <__addsf3x+0x9a>
 484:	ff 0f       	add	r31, r31
 486:	bb 1f       	adc	r27, r27
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	c2 f7       	brpl	.-16     	; 0x480 <__addsf3x+0x6e>
 490:	0e c0       	rjmp	.+28     	; 0x4ae <__addsf3x+0x9c>
 492:	ba 0f       	add	r27, r26
 494:	62 1f       	adc	r22, r18
 496:	73 1f       	adc	r23, r19
 498:	84 1f       	adc	r24, r20
 49a:	48 f4       	brcc	.+18     	; 0x4ae <__addsf3x+0x9c>
 49c:	87 95       	ror	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b7 95       	ror	r27
 4a4:	f7 95       	ror	r31
 4a6:	9e 3f       	cpi	r25, 0xFE	; 254
 4a8:	08 f0       	brcs	.+2      	; 0x4ac <__addsf3x+0x9a>
 4aa:	b0 cf       	rjmp	.-160    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 4ac:	93 95       	inc	r25
 4ae:	88 0f       	add	r24, r24
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__addsf3x+0xa2>
 4b2:	99 27       	eor	r25, r25
 4b4:	ee 0f       	add	r30, r30
 4b6:	97 95       	ror	r25
 4b8:	87 95       	ror	r24
 4ba:	08 95       	ret

000004bc <__divsf3>:
 4bc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divsf3x>
 4c0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_round>
 4c4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscB>
 4c8:	58 f0       	brcs	.+22     	; 0x4e0 <__divsf3+0x24>
 4ca:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_pscA>
 4ce:	40 f0       	brcs	.+16     	; 0x4e0 <__divsf3+0x24>
 4d0:	29 f4       	brne	.+10     	; 0x4dc <__divsf3+0x20>
 4d2:	5f 3f       	cpi	r21, 0xFF	; 255
 4d4:	29 f0       	breq	.+10     	; 0x4e0 <__divsf3+0x24>
 4d6:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 4da:	51 11       	cpse	r21, r1
 4dc:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_szero>
 4e0:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_nan>

000004e4 <__divsf3x>:
 4e4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_split3>
 4e8:	68 f3       	brcs	.-38     	; 0x4c4 <__divsf3+0x8>

000004ea <__divsf3_pse>:
 4ea:	99 23       	and	r25, r25
 4ec:	b1 f3       	breq	.-20     	; 0x4da <__divsf3+0x1e>
 4ee:	55 23       	and	r21, r21
 4f0:	91 f3       	breq	.-28     	; 0x4d6 <__divsf3+0x1a>
 4f2:	95 1b       	sub	r25, r21
 4f4:	55 0b       	sbc	r21, r21
 4f6:	bb 27       	eor	r27, r27
 4f8:	aa 27       	eor	r26, r26
 4fa:	62 17       	cp	r22, r18
 4fc:	73 07       	cpc	r23, r19
 4fe:	84 07       	cpc	r24, r20
 500:	38 f0       	brcs	.+14     	; 0x510 <__divsf3_pse+0x26>
 502:	9f 5f       	subi	r25, 0xFF	; 255
 504:	5f 4f       	sbci	r21, 0xFF	; 255
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	44 1f       	adc	r20, r20
 50c:	aa 1f       	adc	r26, r26
 50e:	a9 f3       	breq	.-22     	; 0x4fa <__divsf3_pse+0x10>
 510:	35 d0       	rcall	.+106    	; 0x57c <__divsf3_pse+0x92>
 512:	0e 2e       	mov	r0, r30
 514:	3a f0       	brmi	.+14     	; 0x524 <__divsf3_pse+0x3a>
 516:	e0 e8       	ldi	r30, 0x80	; 128
 518:	32 d0       	rcall	.+100    	; 0x57e <__divsf3_pse+0x94>
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	50 40       	sbci	r21, 0x00	; 0
 51e:	e6 95       	lsr	r30
 520:	00 1c       	adc	r0, r0
 522:	ca f7       	brpl	.-14     	; 0x516 <__divsf3_pse+0x2c>
 524:	2b d0       	rcall	.+86     	; 0x57c <__divsf3_pse+0x92>
 526:	fe 2f       	mov	r31, r30
 528:	29 d0       	rcall	.+82     	; 0x57c <__divsf3_pse+0x92>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	bb 1f       	adc	r27, r27
 532:	26 17       	cp	r18, r22
 534:	37 07       	cpc	r19, r23
 536:	48 07       	cpc	r20, r24
 538:	ab 07       	cpc	r26, r27
 53a:	b0 e8       	ldi	r27, 0x80	; 128
 53c:	09 f0       	breq	.+2      	; 0x540 <__divsf3_pse+0x56>
 53e:	bb 0b       	sbc	r27, r27
 540:	80 2d       	mov	r24, r0
 542:	bf 01       	movw	r22, r30
 544:	ff 27       	eor	r31, r31
 546:	93 58       	subi	r25, 0x83	; 131
 548:	5f 4f       	sbci	r21, 0xFF	; 255
 54a:	3a f0       	brmi	.+14     	; 0x55a <__divsf3_pse+0x70>
 54c:	9e 3f       	cpi	r25, 0xFE	; 254
 54e:	51 05       	cpc	r21, r1
 550:	78 f0       	brcs	.+30     	; 0x570 <__divsf3_pse+0x86>
 552:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 556:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_szero>
 55a:	5f 3f       	cpi	r21, 0xFF	; 255
 55c:	e4 f3       	brlt	.-8      	; 0x556 <__divsf3_pse+0x6c>
 55e:	98 3e       	cpi	r25, 0xE8	; 232
 560:	d4 f3       	brlt	.-12     	; 0x556 <__divsf3_pse+0x6c>
 562:	86 95       	lsr	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	b7 95       	ror	r27
 56a:	f7 95       	ror	r31
 56c:	9f 5f       	subi	r25, 0xFF	; 255
 56e:	c9 f7       	brne	.-14     	; 0x562 <__divsf3_pse+0x78>
 570:	88 0f       	add	r24, r24
 572:	91 1d       	adc	r25, r1
 574:	96 95       	lsr	r25
 576:	87 95       	ror	r24
 578:	97 f9       	bld	r25, 7
 57a:	08 95       	ret
 57c:	e1 e0       	ldi	r30, 0x01	; 1
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	bb 1f       	adc	r27, r27
 586:	62 17       	cp	r22, r18
 588:	73 07       	cpc	r23, r19
 58a:	84 07       	cpc	r24, r20
 58c:	ba 07       	cpc	r27, r26
 58e:	20 f0       	brcs	.+8      	; 0x598 <__divsf3_pse+0xae>
 590:	62 1b       	sub	r22, r18
 592:	73 0b       	sbc	r23, r19
 594:	84 0b       	sbc	r24, r20
 596:	ba 0b       	sbc	r27, r26
 598:	ee 1f       	adc	r30, r30
 59a:	88 f7       	brcc	.-30     	; 0x57e <__divsf3_pse+0x94>
 59c:	e0 95       	com	r30
 59e:	08 95       	ret

000005a0 <__fixsfsi>:
 5a0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fixunssfsi>
 5a4:	68 94       	set
 5a6:	b1 11       	cpse	r27, r1
 5a8:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_szero>
 5ac:	08 95       	ret

000005ae <__fixunssfsi>:
 5ae:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_splitA>
 5b2:	88 f0       	brcs	.+34     	; 0x5d6 <__fixunssfsi+0x28>
 5b4:	9f 57       	subi	r25, 0x7F	; 127
 5b6:	98 f0       	brcs	.+38     	; 0x5de <__fixunssfsi+0x30>
 5b8:	b9 2f       	mov	r27, r25
 5ba:	99 27       	eor	r25, r25
 5bc:	b7 51       	subi	r27, 0x17	; 23
 5be:	b0 f0       	brcs	.+44     	; 0x5ec <__fixunssfsi+0x3e>
 5c0:	e1 f0       	breq	.+56     	; 0x5fa <__fixunssfsi+0x4c>
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a f0       	brmi	.+6      	; 0x5d2 <__fixunssfsi+0x24>
 5cc:	ba 95       	dec	r27
 5ce:	c9 f7       	brne	.-14     	; 0x5c2 <__fixunssfsi+0x14>
 5d0:	14 c0       	rjmp	.+40     	; 0x5fa <__fixunssfsi+0x4c>
 5d2:	b1 30       	cpi	r27, 0x01	; 1
 5d4:	91 f0       	breq	.+36     	; 0x5fa <__fixunssfsi+0x4c>
 5d6:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_zero>
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	08 95       	ret
 5de:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__fp_zero>
 5e2:	67 2f       	mov	r22, r23
 5e4:	78 2f       	mov	r23, r24
 5e6:	88 27       	eor	r24, r24
 5e8:	b8 5f       	subi	r27, 0xF8	; 248
 5ea:	39 f0       	breq	.+14     	; 0x5fa <__fixunssfsi+0x4c>
 5ec:	b9 3f       	cpi	r27, 0xF9	; 249
 5ee:	cc f3       	brlt	.-14     	; 0x5e2 <__fixunssfsi+0x34>
 5f0:	86 95       	lsr	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b3 95       	inc	r27
 5f8:	d9 f7       	brne	.-10     	; 0x5f0 <__fixunssfsi+0x42>
 5fa:	3e f4       	brtc	.+14     	; 0x60a <__fixunssfsi+0x5c>
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__floatunsisf>:
 60c:	e8 94       	clt
 60e:	09 c0       	rjmp	.+18     	; 0x622 <__floatsisf+0x12>

00000610 <__floatsisf>:
 610:	97 fb       	bst	r25, 7
 612:	3e f4       	brtc	.+14     	; 0x622 <__floatsisf+0x12>
 614:	90 95       	com	r25
 616:	80 95       	com	r24
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	99 23       	and	r25, r25
 624:	a9 f0       	breq	.+42     	; 0x650 <__floatsisf+0x40>
 626:	f9 2f       	mov	r31, r25
 628:	96 e9       	ldi	r25, 0x96	; 150
 62a:	bb 27       	eor	r27, r27
 62c:	93 95       	inc	r25
 62e:	f6 95       	lsr	r31
 630:	87 95       	ror	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f1 11       	cpse	r31, r1
 63a:	f8 cf       	rjmp	.-16     	; 0x62c <__floatsisf+0x1c>
 63c:	fa f4       	brpl	.+62     	; 0x67c <__floatsisf+0x6c>
 63e:	bb 0f       	add	r27, r27
 640:	11 f4       	brne	.+4      	; 0x646 <__floatsisf+0x36>
 642:	60 ff       	sbrs	r22, 0
 644:	1b c0       	rjmp	.+54     	; 0x67c <__floatsisf+0x6c>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	16 c0       	rjmp	.+44     	; 0x67c <__floatsisf+0x6c>
 650:	88 23       	and	r24, r24
 652:	11 f0       	breq	.+4      	; 0x658 <__floatsisf+0x48>
 654:	96 e9       	ldi	r25, 0x96	; 150
 656:	11 c0       	rjmp	.+34     	; 0x67a <__floatsisf+0x6a>
 658:	77 23       	and	r23, r23
 65a:	21 f0       	breq	.+8      	; 0x664 <__floatsisf+0x54>
 65c:	9e e8       	ldi	r25, 0x8E	; 142
 65e:	87 2f       	mov	r24, r23
 660:	76 2f       	mov	r23, r22
 662:	05 c0       	rjmp	.+10     	; 0x66e <__floatsisf+0x5e>
 664:	66 23       	and	r22, r22
 666:	71 f0       	breq	.+28     	; 0x684 <__floatsisf+0x74>
 668:	96 e8       	ldi	r25, 0x86	; 134
 66a:	86 2f       	mov	r24, r22
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	2a f0       	brmi	.+10     	; 0x67c <__floatsisf+0x6c>
 672:	9a 95       	dec	r25
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	da f7       	brpl	.-10     	; 0x672 <__floatsisf+0x62>
 67c:	88 0f       	add	r24, r24
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__fp_inf>:
 686:	97 f9       	bld	r25, 7
 688:	9f 67       	ori	r25, 0x7F	; 127
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	08 95       	ret

00000692 <__fp_nan>:
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	80 ec       	ldi	r24, 0xC0	; 192
 696:	08 95       	ret

00000698 <__fp_pscA>:
 698:	00 24       	eor	r0, r0
 69a:	0a 94       	dec	r0
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	09 06       	cpc	r0, r25
 6a4:	08 95       	ret

000006a6 <__fp_pscB>:
 6a6:	00 24       	eor	r0, r0
 6a8:	0a 94       	dec	r0
 6aa:	12 16       	cp	r1, r18
 6ac:	13 06       	cpc	r1, r19
 6ae:	14 06       	cpc	r1, r20
 6b0:	05 06       	cpc	r0, r21
 6b2:	08 95       	ret

000006b4 <__fp_round>:
 6b4:	09 2e       	mov	r0, r25
 6b6:	03 94       	inc	r0
 6b8:	00 0c       	add	r0, r0
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__fp_round+0xc>
 6bc:	88 23       	and	r24, r24
 6be:	52 f0       	brmi	.+20     	; 0x6d4 <__fp_round+0x20>
 6c0:	bb 0f       	add	r27, r27
 6c2:	40 f4       	brcc	.+16     	; 0x6d4 <__fp_round+0x20>
 6c4:	bf 2b       	or	r27, r31
 6c6:	11 f4       	brne	.+4      	; 0x6cc <__fp_round+0x18>
 6c8:	60 ff       	sbrs	r22, 0
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <__fp_round+0x20>
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__fp_split3>:
 6d6:	57 fd       	sbrc	r21, 7
 6d8:	90 58       	subi	r25, 0x80	; 128
 6da:	44 0f       	add	r20, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	59 f0       	breq	.+22     	; 0x6f6 <__fp_splitA+0x10>
 6e0:	5f 3f       	cpi	r21, 0xFF	; 255
 6e2:	71 f0       	breq	.+28     	; 0x700 <__fp_splitA+0x1a>
 6e4:	47 95       	ror	r20

000006e6 <__fp_splitA>:
 6e6:	88 0f       	add	r24, r24
 6e8:	97 fb       	bst	r25, 7
 6ea:	99 1f       	adc	r25, r25
 6ec:	61 f0       	breq	.+24     	; 0x706 <__fp_splitA+0x20>
 6ee:	9f 3f       	cpi	r25, 0xFF	; 255
 6f0:	79 f0       	breq	.+30     	; 0x710 <__fp_splitA+0x2a>
 6f2:	87 95       	ror	r24
 6f4:	08 95       	ret
 6f6:	12 16       	cp	r1, r18
 6f8:	13 06       	cpc	r1, r19
 6fa:	14 06       	cpc	r1, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	f2 cf       	rjmp	.-28     	; 0x6e4 <__fp_split3+0xe>
 700:	46 95       	lsr	r20
 702:	f1 df       	rcall	.-30     	; 0x6e6 <__fp_splitA>
 704:	08 c0       	rjmp	.+16     	; 0x716 <__fp_splitA+0x30>
 706:	16 16       	cp	r1, r22
 708:	17 06       	cpc	r1, r23
 70a:	18 06       	cpc	r1, r24
 70c:	99 1f       	adc	r25, r25
 70e:	f1 cf       	rjmp	.-30     	; 0x6f2 <__fp_splitA+0xc>
 710:	86 95       	lsr	r24
 712:	71 05       	cpc	r23, r1
 714:	61 05       	cpc	r22, r1
 716:	08 94       	sec
 718:	08 95       	ret

0000071a <__fp_zero>:
 71a:	e8 94       	clt

0000071c <__fp_szero>:
 71c:	bb 27       	eor	r27, r27
 71e:	66 27       	eor	r22, r22
 720:	77 27       	eor	r23, r23
 722:	cb 01       	movw	r24, r22
 724:	97 f9       	bld	r25, 7
 726:	08 95       	ret

00000728 <__gesf2>:
 728:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_cmp>
 72c:	08 f4       	brcc	.+2      	; 0x730 <__gesf2+0x8>
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	08 95       	ret

00000732 <__mulsf3>:
 732:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3x>
 736:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_round>
 73a:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_pscA>
 73e:	38 f0       	brcs	.+14     	; 0x74e <__mulsf3+0x1c>
 740:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_pscB>
 744:	20 f0       	brcs	.+8      	; 0x74e <__mulsf3+0x1c>
 746:	95 23       	and	r25, r21
 748:	11 f0       	breq	.+4      	; 0x74e <__mulsf3+0x1c>
 74a:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 74e:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_szero>

00000758 <__mulsf3x>:
 758:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_split3>
 75c:	70 f3       	brcs	.-36     	; 0x73a <__mulsf3+0x8>

0000075e <__mulsf3_pse>:
 75e:	95 9f       	mul	r25, r21
 760:	c1 f3       	breq	.-16     	; 0x752 <__mulsf3+0x20>
 762:	95 0f       	add	r25, r21
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	55 1f       	adc	r21, r21
 768:	62 9f       	mul	r22, r18
 76a:	f0 01       	movw	r30, r0
 76c:	72 9f       	mul	r23, r18
 76e:	bb 27       	eor	r27, r27
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	63 9f       	mul	r22, r19
 776:	aa 27       	eor	r26, r26
 778:	f0 0d       	add	r31, r0
 77a:	b1 1d       	adc	r27, r1
 77c:	aa 1f       	adc	r26, r26
 77e:	64 9f       	mul	r22, r20
 780:	66 27       	eor	r22, r22
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	66 1f       	adc	r22, r22
 788:	82 9f       	mul	r24, r18
 78a:	22 27       	eor	r18, r18
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	73 9f       	mul	r23, r19
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	62 1f       	adc	r22, r18
 79a:	83 9f       	mul	r24, r19
 79c:	a0 0d       	add	r26, r0
 79e:	61 1d       	adc	r22, r1
 7a0:	22 1f       	adc	r18, r18
 7a2:	74 9f       	mul	r23, r20
 7a4:	33 27       	eor	r19, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	23 1f       	adc	r18, r19
 7ac:	84 9f       	mul	r24, r20
 7ae:	60 0d       	add	r22, r0
 7b0:	21 1d       	adc	r18, r1
 7b2:	82 2f       	mov	r24, r18
 7b4:	76 2f       	mov	r23, r22
 7b6:	6a 2f       	mov	r22, r26
 7b8:	11 24       	eor	r1, r1
 7ba:	9f 57       	subi	r25, 0x7F	; 127
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	9a f0       	brmi	.+38     	; 0x7e6 <__mulsf3_pse+0x88>
 7c0:	f1 f0       	breq	.+60     	; 0x7fe <__mulsf3_pse+0xa0>
 7c2:	88 23       	and	r24, r24
 7c4:	4a f0       	brmi	.+18     	; 0x7d8 <__mulsf3_pse+0x7a>
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	bb 1f       	adc	r27, r27
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__mulsf3_pse+0x64>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	80 f0       	brcs	.+32     	; 0x7fe <__mulsf3_pse+0xa0>
 7de:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_inf>
 7e2:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__mulsf3_pse+0x84>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__mulsf3_pse+0x84>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x90>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_cmp>:
 80c:	99 0f       	add	r25, r25
 80e:	00 08       	sbc	r0, r0
 810:	55 0f       	add	r21, r21
 812:	aa 0b       	sbc	r26, r26
 814:	e0 e8       	ldi	r30, 0x80	; 128
 816:	fe ef       	ldi	r31, 0xFE	; 254
 818:	16 16       	cp	r1, r22
 81a:	17 06       	cpc	r1, r23
 81c:	e8 07       	cpc	r30, r24
 81e:	f9 07       	cpc	r31, r25
 820:	c0 f0       	brcs	.+48     	; 0x852 <__fp_cmp+0x46>
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	e4 07       	cpc	r30, r20
 828:	f5 07       	cpc	r31, r21
 82a:	98 f0       	brcs	.+38     	; 0x852 <__fp_cmp+0x46>
 82c:	62 1b       	sub	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	95 0b       	sbc	r25, r21
 834:	39 f4       	brne	.+14     	; 0x844 <__fp_cmp+0x38>
 836:	0a 26       	eor	r0, r26
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_cmp+0x46>
 83a:	23 2b       	or	r18, r19
 83c:	24 2b       	or	r18, r20
 83e:	25 2b       	or	r18, r21
 840:	21 f4       	brne	.+8      	; 0x84a <__fp_cmp+0x3e>
 842:	08 95       	ret
 844:	0a 26       	eor	r0, r26
 846:	09 f4       	brne	.+2      	; 0x84a <__fp_cmp+0x3e>
 848:	a1 40       	sbci	r26, 0x01	; 1
 84a:	a6 95       	lsr	r26
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	81 1d       	adc	r24, r1
 850:	81 1d       	adc	r24, r1
 852:	08 95       	ret

00000854 <__divmodhi4>:
 854:	97 fb       	bst	r25, 7
 856:	07 2e       	mov	r0, r23
 858:	16 f4       	brtc	.+4      	; 0x85e <__divmodhi4+0xa>
 85a:	00 94       	com	r0
 85c:	07 d0       	rcall	.+14     	; 0x86c <__divmodhi4_neg1>
 85e:	77 fd       	sbrc	r23, 7
 860:	09 d0       	rcall	.+18     	; 0x874 <__divmodhi4_neg2>
 862:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__udivmodhi4>
 866:	07 fc       	sbrc	r0, 7
 868:	05 d0       	rcall	.+10     	; 0x874 <__divmodhi4_neg2>
 86a:	3e f4       	brtc	.+14     	; 0x87a <__divmodhi4_exit>

0000086c <__divmodhi4_neg1>:
 86c:	90 95       	com	r25
 86e:	81 95       	neg	r24
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__divmodhi4_neg2>:
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255

0000087a <__divmodhi4_exit>:
 87a:	08 95       	ret

0000087c <__divmodsi4>:
 87c:	05 2e       	mov	r0, r21
 87e:	97 fb       	bst	r25, 7
 880:	1e f4       	brtc	.+6      	; 0x888 <__divmodsi4+0xc>
 882:	00 94       	com	r0
 884:	0e 94 55 04 	call	0x8aa	; 0x8aa <__negsi2>
 888:	57 fd       	sbrc	r21, 7
 88a:	07 d0       	rcall	.+14     	; 0x89a <__divmodsi4_neg2>
 88c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__udivmodsi4>
 890:	07 fc       	sbrc	r0, 7
 892:	03 d0       	rcall	.+6      	; 0x89a <__divmodsi4_neg2>
 894:	4e f4       	brtc	.+18     	; 0x8a8 <__divmodsi4_exit>
 896:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__negsi2>

0000089a <__divmodsi4_neg2>:
 89a:	50 95       	com	r21
 89c:	40 95       	com	r20
 89e:	30 95       	com	r19
 8a0:	21 95       	neg	r18
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	4f 4f       	sbci	r20, 0xFF	; 255
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255

000008a8 <__divmodsi4_exit>:
 8a8:	08 95       	ret

000008aa <__negsi2>:
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	08 95       	ret

000008ba <__udivmodhi4>:
 8ba:	aa 1b       	sub	r26, r26
 8bc:	bb 1b       	sub	r27, r27
 8be:	51 e1       	ldi	r21, 0x11	; 17
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <__udivmodhi4_ep>

000008c2 <__udivmodhi4_loop>:
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	a6 17       	cp	r26, r22
 8c8:	b7 07       	cpc	r27, r23
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <__udivmodhi4_ep>
 8cc:	a6 1b       	sub	r26, r22
 8ce:	b7 0b       	sbc	r27, r23

000008d0 <__udivmodhi4_ep>:
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	5a 95       	dec	r21
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__udivmodhi4_loop>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	bc 01       	movw	r22, r24
 8de:	cd 01       	movw	r24, r26
 8e0:	08 95       	ret

000008e2 <__udivmodsi4>:
 8e2:	a1 e2       	ldi	r26, 0x21	; 33
 8e4:	1a 2e       	mov	r1, r26
 8e6:	aa 1b       	sub	r26, r26
 8e8:	bb 1b       	sub	r27, r27
 8ea:	fd 01       	movw	r30, r26
 8ec:	0d c0       	rjmp	.+26     	; 0x908 <__udivmodsi4_ep>

000008ee <__udivmodsi4_loop>:
 8ee:	aa 1f       	adc	r26, r26
 8f0:	bb 1f       	adc	r27, r27
 8f2:	ee 1f       	adc	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	a2 17       	cp	r26, r18
 8f8:	b3 07       	cpc	r27, r19
 8fa:	e4 07       	cpc	r30, r20
 8fc:	f5 07       	cpc	r31, r21
 8fe:	20 f0       	brcs	.+8      	; 0x908 <__udivmodsi4_ep>
 900:	a2 1b       	sub	r26, r18
 902:	b3 0b       	sbc	r27, r19
 904:	e4 0b       	sbc	r30, r20
 906:	f5 0b       	sbc	r31, r21

00000908 <__udivmodsi4_ep>:
 908:	66 1f       	adc	r22, r22
 90a:	77 1f       	adc	r23, r23
 90c:	88 1f       	adc	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	1a 94       	dec	r1
 912:	69 f7       	brne	.-38     	; 0x8ee <__udivmodsi4_loop>
 914:	60 95       	com	r22
 916:	70 95       	com	r23
 918:	80 95       	com	r24
 91a:	90 95       	com	r25
 91c:	9b 01       	movw	r18, r22
 91e:	ac 01       	movw	r20, r24
 920:	bd 01       	movw	r22, r26
 922:	cf 01       	movw	r24, r30
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
